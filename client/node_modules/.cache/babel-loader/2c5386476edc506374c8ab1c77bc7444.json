{"ast":null,"code":"var _jsxFileName = \"/home/brandon/jsproj/thetypingtest/src/Components/TimerCircle.js\";\nimport React, { useState } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport '../css/timercircle.css';\n\nfunction renderTime({\n  remainingTime,\n  resetTest\n}) {\n  if (remainingTime === 0) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: resetTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 14\n      }\n    }, \" Start Over! \");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, remainingTime), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"seconds\"));\n}\n\n;\n\nconst TimerCircle = ({\n  isTestActive,\n  testComplete,\n  resetTest,\n  isTestDone\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CountdownCircleTimer, {\n    isPlaying: isTestActive,\n    duration: 5,\n    colors: [['#004777', 0.33], ['#F7B801', 0.33], ['#A30000', 0.33]],\n    onComplete: () => testComplete(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"renderTime\", {\n    remainingTime: true,\n    resetTest: resetTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default TimerCircle;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/TimerCircle.js"],"names":["React","useState","CountdownCircleTimer","renderTime","remainingTime","resetTest","TimerCircle","isTestActive","testComplete","isTestDone"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,OAAO,wBAAP;;AAEA,SAASC,UAAT,CAAqB;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAArB,EAAmD;AACjD,MAAID,aAAa,KAAK,CAAtB,EAAyB;AACvB,wBAAS;AACP,MAAA,OAAO,EAAEC,SAAS,EADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAT;AAED;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBD,aAAxB,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CADF;AAMD;;AAAA;;AAED,MAAME,WAAW,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,YAAhB;AAA8BH,EAAAA,SAA9B;AAAyCI,EAAAA;AAAzC,CAAD,KAA2D;AAC7E,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,oBAAD;AACE,IAAA,SAAS,EAAEF,YADb;AAEE,IAAA,QAAQ,EAAE,CAFZ;AAGE,IAAA,MAAM,EAAE,CACN,CAAC,SAAD,EAAY,IAAZ,CADM,EAEN,CAAC,SAAD,EAAY,IAAZ,CAFM,EAGN,CAAC,SAAD,EAAY,IAAZ,CAHM,CAHV;AAQE,IAAA,UAAU,EAAE,MAAMC,YAAY,EARhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE;AACE,IAAA,aAAa,MADf;AAEE,IAAA,SAAS,EAAEH,SAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADJ,CADF;AAmBD,CApBD;;AAsBA,eAAeC,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport '../css/timercircle.css';\n\nfunction renderTime ({ remainingTime, resetTest }) {\n  if (remainingTime === 0) {\n    return   <button\n      onClick={resetTest()}> Start Over! </button>\n  }\n  return (\n    <div className=\"timer\">\n      <div className=\"value\">{remainingTime}</div>\n      <div className=\"text\">seconds</div>\n    </div>\n  );\n};\n\nconst TimerCircle = ({ isTestActive, testComplete, resetTest, isTestDone }) => {\n  return (\n    <div>\n        <CountdownCircleTimer\n          isPlaying={isTestActive}\n          duration={5}\n          colors={[\n            ['#004777', 0.33],\n            ['#F7B801', 0.33],\n            ['#A30000', 0.33],\n          ]}\n          onComplete={() => testComplete()}\n        >\n          <renderTime\n            remainingTime\n            resetTest={resetTest}\n          />\n        </CountdownCircleTimer>\n    </div>\n  );\n}\n\nexport default TimerCircle;\n"]},"metadata":{},"sourceType":"module"}