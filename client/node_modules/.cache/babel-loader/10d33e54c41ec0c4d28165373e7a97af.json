{"ast":null,"code":"var _jsxFileName = \"/home/brandon/jsproj/thetypingtest/src/Components/Stats.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AVERAGE_WORD, SIXTY_SECONDS } from '../utils/constants';\nimport '../css/stats.css';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\n\nconst Stats = ({\n  testWords,\n  userInputWords,\n  currentWordNum,\n  currentCharNum,\n  isTestActive,\n  isTestDone,\n  resetTestState\n}) => {\n  const [wordPerMin, setWordPerMin] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [totalTypedChars, setTotalTypedChars] = useState(0);\n  const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n  useEffect(() => {\n    let interval = null;\n\n    if (isTestActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 0.05);\n      }, 50);\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, isTestActive]);\n  useEffect(() => {\n    if (resetTestState) {\n      setWordPerMin(0);\n      setSeconds(0);\n      setTotalTypedChars(0);\n      setTotalCorrectChars(0);\n    }\n\n    calcWPM();\n  }, [userInputWords, seconds, resetTestState]);\n  const prevUserInputWordsRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords[currentWordNum];\n    calcAccuracy();\n  }, [userInputWords]);\n  const prevUserInputWords = prevUserInputWordsRef.current;\n\n  const calcWPM = () => {\n    const wpm = Math.round(totalTypedChars / AVERAGE_WORD / (seconds / SIXTY_SECONDS));\n    setWordPerMin(Number.isNaN(wpm) || !isFinite(wpm) ? 0 : wpm);\n  };\n\n  const isCharCorrect = () => {\n    if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n      setTotalCorrectChars(totalCorrectChars + 1);\n      setTotalTypedChars(totalTypedChars + 1);\n    } else {\n      setTotalTypedChars(totalTypedChars + 1);\n    }\n  };\n\n  const calcAccuracy = () => {\n    if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n      isCharCorrect();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    position: \"right center\",\n    modal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"Popup content here !!\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-boxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \"Words Per Min.\"), wordPerMin)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-boxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"Accuracy\"), totalTypedChars === 0 ? 0 : Math.round(totalCorrectChars / totalTypedChars * 100), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"percent-sign\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"%\"))));\n};\n\nexport default Stats;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/Stats.js"],"names":["React","useState","useEffect","useRef","AVERAGE_WORD","SIXTY_SECONDS","Popup","Stats","testWords","userInputWords","currentWordNum","currentCharNum","isTestActive","isTestDone","resetTestState","wordPerMin","setWordPerMin","seconds","setSeconds","totalTypedChars","setTotalTypedChars","totalCorrectChars","setTotalCorrectChars","interval","setInterval","clearInterval","calcWPM","prevUserInputWordsRef","current","calcAccuracy","prevUserInputWords","wpm","Math","round","Number","isNaN","isFinite","isCharCorrect","slice","undefined","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { AVERAGE_WORD, SIXTY_SECONDS } from '../utils/constants'\nimport '../css/stats.css';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\n\nconst Stats = ({ testWords, userInputWords, currentWordNum, currentCharNum, isTestActive, isTestDone, resetTestState }) => {\n    const [wordPerMin, setWordPerMin] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    const [totalTypedChars, setTotalTypedChars] = useState(0);\n    const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isTestActive) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 0.05);\n            }, 50);\n        }\n        return () => clearInterval(interval);\n    }, [seconds, isTestActive]);\n\n    useEffect(() => {\n        if (resetTestState) {\n            setWordPerMin(0);\n            setSeconds(0);\n            setTotalTypedChars(0);\n            setTotalCorrectChars(0);\n        }\n        calcWPM();\n    }, [userInputWords, seconds, resetTestState])\n\n    const prevUserInputWordsRef = useRef();\n    useEffect(() => {\n        prevUserInputWordsRef.current = userInputWords[currentWordNum];\n        calcAccuracy();\n    }, [userInputWords])\n    const prevUserInputWords = prevUserInputWordsRef.current;\n\n    const calcWPM = () => {\n        const wpm = Math.round(totalTypedChars / AVERAGE_WORD / (seconds / SIXTY_SECONDS));\n        setWordPerMin((Number.isNaN(wpm) || !isFinite(wpm)) ? 0 : wpm)\n    }\n\n    const isCharCorrect = () => {\n        if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n            setTotalCorrectChars(totalCorrectChars + 1)\n            setTotalTypedChars(totalTypedChars + 1)\n        } else {\n            setTotalTypedChars(totalTypedChars + 1)\n        }\n    }\n\n    const calcAccuracy = () => {\n        if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n            isCharCorrect();\n        }\n    }\n\n    return (\n        <div>\n            <Popup position=\"right center\" modal>\n                <div>Popup content here !!</div>\n            </Popup>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Words Per Min.</div>\n                    {wordPerMin}\n                </div>\n            </div>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Accuracy</div>\n                    {totalTypedChars === 0 ? 0 : Math.round((totalCorrectChars / totalTypedChars) * 100)}\n                    <span className='percent-sign'>%</span>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Stats;"]},"metadata":{},"sourceType":"module"}