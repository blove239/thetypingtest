{"ast":null,"code":"import _objectSpread from\"/home/brandon/jsproj/thetypingtest/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/brandon/jsproj/thetypingtest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,createRef,useRef,memo}from'react';import Char from'./Char';import'../css/word.css';var Word=function Word(_ref){var word=_ref.word,isCurrentWord=_ref.isCurrentWord,userInputWords=_ref.userInputWords,currentWordNum=_ref.currentWordNum,resetTestState=_ref.resetTestState,isTestActive=_ref.isTestActive;var charList=word.split('').map(function(char,i){return{char:char,style:'default',key:i};});var _useState=useState(charList),_useState2=_slicedToArray(_useState,2),chars=_useState2[0],setChars=_useState2[1];var scrollRef=createRef();var prevUserInputWordsRef=useRef();var prevCurrentWordNumRef=useRef();useEffect(function(){prevUserInputWordsRef.current=userInputWords[currentWordNum];prevCurrentWordNumRef.current=currentWordNum;},[userInputWords,currentWordNum]);var prevUserInputWords=prevUserInputWordsRef.current;var prevCurrentWordNum=prevCurrentWordNumRef.current;var updateCharStyles=function updateCharStyles(){if(userInputWords[currentWordNum].length<=word.length&&isTestActive){var newChars=chars.map(function(charInstance,i){var inputChar=userInputWords[currentWordNum][i];var newChar=_objectSpread({},charInstance,{style:'default'});if(charInstance.char===inputChar){newChar.style='correctChar';}else if(inputChar&&inputChar!==charInstance.char){newChar.style='incorrectChar';}return newChar;});setChars(newChars);}if(userInputWords[currentWordNum].length>=word.length&&prevUserInputWords.length>userInputWords[currentWordNum].length){setChars(function(chars){return chars.slice(0,-1);});}else if(userInputWords[currentWordNum].length>word.length){setChars(function(chars){return chars.concat({char:userInputWords[currentWordNum].slice(-1),style:'incorrectChar',key:chars.length});});}};useEffect(function(){if(resetTestState){setChars(charList);}if(isCurrentWord){scrollRef.current.scrollIntoView({behavior:'smooth',block:'center'});}if(isCurrentWord&&prevCurrentWordNum===currentWordNum){updateCharStyles();}},[userInputWords,currentWordNum,resetTestState]);var renderChar=function renderChar(key,char,style){return/*#__PURE__*/React.createElement(Char,{key:key,style:style,char:char});};return/*#__PURE__*/React.createElement(\"li\",{ref:scrollRef,className:isCurrentWord?'current-word':'default'},chars.map(function(x){return renderChar(x.key,x.char,x.style);}));};var areEqual=function areEqual(prevProps,nextProps){if(nextProps.resetTestState){return false;}else if(nextProps.currentWordNum+1===nextProps.index){return false;}else if(nextProps.currentWordNum===nextProps.index){return false;}else if(nextProps.currentWordNum-1===nextProps.index){return false;}else{return true;}};export default memo(Word,areEqual);","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/Word.js"],"names":["React","useState","useEffect","createRef","useRef","memo","Char","Word","word","isCurrentWord","userInputWords","currentWordNum","resetTestState","isTestActive","charList","split","map","char","i","style","key","chars","setChars","scrollRef","prevUserInputWordsRef","prevCurrentWordNumRef","current","prevUserInputWords","prevCurrentWordNum","updateCharStyles","length","newChars","charInstance","inputChar","newChar","slice","concat","scrollIntoView","behavior","block","renderChar","x","areEqual","prevProps","nextProps","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createRef, useRef, memo } from 'react';\nimport Char from './Char';\nimport '../css/word.css';\n\nconst Word = ({ word, isCurrentWord, userInputWords, currentWordNum, resetTestState, isTestActive }) => {\n  const charList = word.split('').map((char, i) => {\n    return {\n      char: char,\n      style: 'default',\n      key: i\n    };\n  });\n  const [chars, setChars] = useState(charList);\n  const scrollRef = createRef();\n\n  const prevUserInputWordsRef = useRef();\n  const prevCurrentWordNumRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords[currentWordNum];\n    prevCurrentWordNumRef.current = currentWordNum;\n  }, [userInputWords, currentWordNum])\n\n  const prevUserInputWords = prevUserInputWordsRef.current;\n  const prevCurrentWordNum = prevCurrentWordNumRef.current;\n\n  const updateCharStyles = () => {\n    if (userInputWords[currentWordNum].length <= word.length && isTestActive) {\n      const newChars = chars.map((charInstance, i) => {\n        const inputChar = userInputWords[currentWordNum][i];\n        const newChar = {\n          ...charInstance,\n          style: 'default'\n        };\n        if (charInstance.char === inputChar) {\n          newChar.style = 'correctChar'\n        } else if (inputChar && inputChar !== charInstance.char) {\n          newChar.style = 'incorrectChar'\n        }\n        return newChar;\n      })\n      setChars(newChars);\n    } if (userInputWords[currentWordNum].length >= word.length &&\n      (prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n      setChars(chars => chars.slice(0, -1))\n    } else if (userInputWords[currentWordNum].length > word.length) {\n      setChars(chars => chars.concat({\n        char: userInputWords[currentWordNum].slice(-1),\n        style: 'incorrectChar',\n        key: chars.length\n      }))\n    }\n  }\n\n  useEffect(() => {\n    if (resetTestState) {\n      setChars(charList);\n    }\n    if (isCurrentWord) {\n      scrollRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n      });\n    }\n    if (isCurrentWord && prevCurrentWordNum === currentWordNum) {\n      updateCharStyles();\n    }\n  }, [userInputWords, currentWordNum, resetTestState])\n\n  const renderChar = (key, char, style) => {\n    return (\n      <Char\n        key={key}\n        style={style}\n        char={char}\n      />\n    );\n  };\n  return (\n    <li ref={scrollRef} className={(isCurrentWord) ? 'current-word' : 'default'}>\n      {chars.map(x => renderChar(x.key, x.char, x.style))}\n    </li>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (nextProps.resetTestState) {\n    return false;\n  }\n  else if (nextProps.currentWordNum + 1 === nextProps.index) {\n    return false;\n  }\n  else if (nextProps.currentWordNum === nextProps.index) {\n    return false;\n  }\n  else if (nextProps.currentWordNum - 1 === nextProps.index) {\n    return false\n  } else {\n    return true;\n  }\n}\n\nexport default memo(Word, areEqual);\n"]},"metadata":{},"sourceType":"module"}