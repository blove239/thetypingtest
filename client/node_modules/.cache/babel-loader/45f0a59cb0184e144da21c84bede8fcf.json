{"ast":null,"code":"import React from'react';import Word from'./Word';import'../css/wordlist.css';var WordList=function WordList(_ref){var userInputWords=_ref.userInputWords,currentWordNum=_ref.currentWordNum,testWords=_ref.testWords,resetTestState=_ref.resetTestWords,isTestActive=_ref.isTestActive;var renderWord=function renderWord(key,word,isCurrent){return/*#__PURE__*/React.createElement(Word,{key:key,index:key,word:word,isCurrentWord:isCurrent,currentWordNum:currentWordNum,resetTestState:resetTestState,userInputWords:userInputWords[currentWordNum],isTestActive:isTestActive});};return/*#__PURE__*/React.createElement(\"div\",{className:\"wordlist-wrapper\"},testWords.map(function(word,index){return renderWord(index,word,index===currentWordNum?true:false);}));};export default WordList;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/WordList.js"],"names":["React","Word","WordList","userInputWords","currentWordNum","testWords","resetTestState","resetTestWords","isTestActive","renderWord","key","word","isCurrent","map","index"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAO,qBAAP,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAiG,IAA9FC,CAAAA,cAA8F,MAA9FA,cAA8F,CAA9EC,cAA8E,MAA9EA,cAA8E,CAA9DC,SAA8D,MAA9DA,SAA8D,CAAnCC,cAAmC,MAAnDC,cAAmD,CAAnBC,YAAmB,MAAnBA,YAAmB,CAC9G,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,GAAD,CAAMC,IAAN,CAAYC,SAAZ,CAA0B,CACzC,mBACI,oBAAC,IAAD,EACI,GAAG,CAAEF,GADT,CAEI,KAAK,CAAEA,GAFX,CAGI,IAAI,CAAEC,IAHV,CAII,aAAa,CAAEC,SAJnB,CAKI,cAAc,CAAER,cALpB,CAMI,cAAc,CAAEE,cANpB,CAOI,cAAc,CAAEH,cAAc,CAACC,cAAD,CAPlC,CAQI,YAAY,CAAEI,YARlB,EADJ,CAYH,CAbD,CAeA,mBACI,2BAAK,SAAS,CAAC,kBAAf,EACMH,SAAS,CAACQ,GAAV,CAAc,SAACF,IAAD,CAAOG,KAAP,QACZL,CAAAA,UAAU,CAACK,KAAD,CAAQH,IAAR,CAAeG,KAAK,GAAKV,cAAX,CAA6B,IAA7B,CAAoC,KAAlD,CADE,EAAd,CADN,CADJ,CAMH,CAtBD,CAwBA,cAAeF,CAAAA,QAAf","sourcesContent":["import React from 'react';\nimport Word from './Word';\nimport '../css/wordlist.css';\n\nconst WordList = ({ userInputWords, currentWordNum, testWords, resetTestWords: resetTestState, isTestActive }) => {\n    const renderWord = (key, word, isCurrent) => {\n        return (\n            <Word\n                key={key}\n                index={key}\n                word={word}\n                isCurrentWord={isCurrent}\n                currentWordNum={currentWordNum}\n                resetTestState={resetTestState}\n                userInputWords={userInputWords[currentWordNum]}\n                isTestActive={isTestActive}\n            />\n        )\n    }\n\n    return (\n        <div className='wordlist-wrapper'>\n            { testWords.map((word, index) =>\n                renderWord(index, word, (index === currentWordNum) ? true : false))}\n        </div>\n    );\n}\n\nexport default WordList;"]},"metadata":{},"sourceType":"module"}