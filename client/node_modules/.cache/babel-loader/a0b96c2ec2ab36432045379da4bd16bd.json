{"ast":null,"code":"var _jsxFileName = \"/home/brandon/jsproj/thetypingtest/src/Components/TimerBar.js\";\nimport React, { useState, useEffect } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport '../css/timerbar.css';\n\nconst Progress = ({\n  width,\n  elapsedTime\n}) => {\n  const [value, setValue] = useState(0);\n  useEffect(() => {\n    setValue(elapsedTime / 60 * width);\n  }, [elapsedTime, width]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-div\",\n    style: {\n      width: width\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"Time Remaining: \", 60 - elapsedTime, \"s\", /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: `${value}px`\n    },\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst TimerBar = ({\n  isTestActive,\n  testComplete,\n  resetTest,\n  isTestDone\n}) => {\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    let interval = null;\n\n    if (isTestActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    }\n\n    if (seconds === 5) {\n      testComplete();\n      setSeconds(0);\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, isTestActive]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, isTestDone ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \" Start Over! \") : /*#__PURE__*/React.createElement(CountdownCircleTimer, {\n    key: isTestActive ? 1 : 0,\n    isPlaying: isTestActive,\n    duration: 5,\n    colors: [['#004777', 0.33], ['#F7B801', 0.33], ['#A30000', 0.33]],\n    onComplete: () => testComplete(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, ({\n    remainingTime\n  }) => remainingTime));\n};\n\nexport default TimerBar;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/TimerBar.js"],"names":["React","useState","useEffect","CountdownCircleTimer","Progress","width","elapsedTime","value","setValue","TimerBar","isTestActive","testComplete","resetTest","isTestDone","seconds","setSeconds","interval","setInterval","clearInterval","remainingTime"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,OAAO,qBAAP;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA4B;AAC3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,QAAQ,CAAEF,WAAW,GAAG,EAAf,GAAqBD,KAAtB,CAAR;AACD,GAFQ,EAEN,CAACC,WAAD,EAAcD,KAAd,CAFM,CAAT;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAAEA;AAAT,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACmB,KAAKC,WADxB,oBAEE;AAAK,IAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAAG,GAAEE,KAAM;AAAlB,KAAZ;AAAqC,IAAA,SAAS,EAAC,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAQD,CAfD;;AAiBA,MAAME,QAAQ,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,YAAhB;AAA8BC,EAAAA,SAA9B;AAAyCC,EAAAA;AAAzC,CAAD,KAA2D;AAC1E,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,CAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,QAAQ,GAAG,IAAf;;AACA,QAAIN,YAAJ,EAAkB;AAChBM,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BF,QAAAA,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAV;AACD,OAFqB,EAEnB,IAFmB,CAAtB;AAGD;;AACD,QAAIA,OAAO,KAAK,CAAhB,EAAmB;AACjBH,MAAAA,YAAY;AACZI,MAAAA,UAAU,CAAC,CAAD,CAAV;AACD;;AACD,WAAO,MAAMG,aAAa,CAACF,QAAD,CAA1B;AACD,GAZQ,EAYN,CAACF,OAAD,EAAUJ,YAAV,CAZM,CAAT;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,UAAU,gBAAG;AACZ,IAAA,OAAO,EAAED,SADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAH,gBAET,oBAAC,oBAAD;AACE,IAAA,GAAG,EAAEF,YAAY,GAAG,CAAH,GAAO,CAD1B;AAEE,IAAA,SAAS,EAAEA,YAFb;AAGE,IAAA,QAAQ,EAAE,CAHZ;AAIE,IAAA,MAAM,EAAE,CACN,CAAC,SAAD,EAAY,IAAZ,CADM,EAEN,CAAC,SAAD,EAAY,IAAZ,CAFM,EAGN,CAAC,SAAD,EAAY,IAAZ,CAHM,CAJV;AASE,IAAA,UAAU,EAAE,MAAMC,YAAY,EAThC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWG,CAAC;AAAEQ,IAAAA;AAAF,GAAD,KAAuBA,aAX1B,CAHJ,CADF;AAmBD,CApCD;;AAsCA,eAAeV,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport '../css/timerbar.css';\n\nconst Progress = ({ width, elapsedTime }) => {\n  const [value, setValue] = useState(0);\n\n  useEffect(() => {\n    setValue((elapsedTime / 60) * width);\n  }, [elapsedTime, width]);\n\n  return (\n    <div>\n      <div className=\"progress-div\" style={{ width: width }}>\n        Time Remaining: {60 - elapsedTime}s\n        <div style={{ width: `${value}px` }} className=\"progress\" />\n      </div>\n    </div>\n  );\n};\n\nconst TimerBar = ({ isTestActive, testComplete, resetTest, isTestDone }) => {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    let interval = null;\n    if (isTestActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    }\n    if (seconds === 5) {\n      testComplete();\n      setSeconds(0);\n    }\n    return () => clearInterval(interval);\n  }, [seconds, isTestActive]);\n\n  return (\n    <div className=\"App\">\n      {isTestDone ? <button\n        onClick={resetTest}> Start Over! </button> :\n        <CountdownCircleTimer\n          key={isTestActive ? 1 : 0}\n          isPlaying={isTestActive}\n          duration={5}\n          colors={[\n            ['#004777', 0.33],\n            ['#F7B801', 0.33],\n            ['#A30000', 0.33],\n          ]}\n          onComplete={() => testComplete()}\n        >\n          {({ remainingTime }) => remainingTime}\n        </CountdownCircleTimer>}\n    </div>\n  );\n}\n\nexport default TimerBar;\n"]},"metadata":{},"sourceType":"module"}