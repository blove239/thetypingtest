{"ast":null,"code":"var _jsxFileName = \"/home/brandon/jsproj/thetypingtest/src/App.js\";\nimport React, { useState, useRef } from 'react';\nimport Title from './Components/Title';\nimport Stats from './Components/Stats';\nimport TimerCircle from './Components/TimerCircle';\nimport WordList from './Components/WordList';\nimport Footer from './Components/Footer';\nimport { TEST_WORDS, KEYCODE_BACKSPACE, KEYCODE_SPACEBAR } from './utils/constants';\nimport randomWords from 'random-words';\nimport './App.css';\n\nconst App = () => {\n  const [currentWordNum, setCurrentWordNum] = useState(0);\n  const [currentCharNum, setCurrentCharNum] = useState(0);\n  const [userInputWords, setUserInputWords] = useState(['']);\n  const [userInputLength, setUserInputLength] = useState(0);\n  const [testWords, setTestWords] = useState(randomWords({\n    exactly: TEST_WORDS\n  }));\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestDone, setIsTestDone] = useState(false);\n  const [resetTestState, setResetTestWords] = useState(false);\n  const typingArea = useRef(null);\n\n  const testComplete = () => {\n    setIsTestActive(false);\n    setIsTestDone(true);\n  };\n\n  const resetTest = () => {\n    setCurrentWordNum(0);\n    setCurrentCharNum(0);\n    setUserInputWords(['']);\n    setTestWords(randomWords({\n      exactly: TEST_WORDS\n    }));\n    setIsTestActive(false);\n    setIsTestDone(false);\n    setResetTestWords(true);\n  };\n\n  const onDeletion = e => {\n    if (userInputWords.length > 1 && userInputWords[currentWordNum].length === 0) {\n      setUserInputWords(userInputWords.slice(0, -1));\n      setCurrentWordNum(currentWordNum - 1);\n      setCurrentCharNum(userInputWords.slice(0, -1).length);\n    } else if (userInputWords[currentWordNum].length > 0) {\n      setCurrentCharNum(currentCharNum - 1);\n      let userInputs = [...userInputWords];\n      userInputs[currentWordNum] = userInputs[currentWordNum].slice(0, -1);\n      setUserInputWords(userInputs);\n    }\n  };\n\n  const onSpacebar = () => {\n    if (testWords[currentWordNum].length <= userInputWords[currentWordNum].length) {\n      setUserInputWords([...userInputWords, '']);\n      setCurrentWordNum(currentWordNum + 1);\n      setCurrentCharNum(0);\n    }\n  };\n\n  const onUserInput = e => {\n    setCurrentCharNum(currentCharNum + 1);\n    let userInputs = [...userInputWords];\n    userInputs[currentWordNum] = userInputs[currentWordNum].concat(e.key);\n    setUserInputWords(userInputs);\n  };\n\n  const handleOnKeyDown = e => {\n    if (!isTestActive) {\n      setIsTestActive(true);\n      setResetTestWords(false);\n    }\n\n    if (e.keyCode === KEYCODE_BACKSPACE) {\n      onDeletion(e);\n    }\n\n    if (e.keyCode === KEYCODE_SPACEBAR) {\n      onSpacebar();\n    }\n\n    if (e.keyCode >= 65 && e.keyCode <= 90) {\n      onUserInput(e);\n    }\n  };\n\n  const handleClick = () => {\n    typingArea.current.focus();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleClick,\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    ref: typingArea,\n    onKeyDown: handleOnKeyDown,\n    type: \"text\",\n    disabled: isTestDone,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(WordList, {\n    currentWordNum: currentWordNum,\n    currentCharNum: currentCharNum,\n    testWords: testWords,\n    resetTestWords: resetTestState,\n    userInputWords: userInputWords,\n    isTestActive: isTestActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TimerCircle, {\n    isTestActive: isTestActive,\n    isTestDone: isTestDone,\n    testComplete: testComplete,\n    resetTest: resetTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Stats, {\n    testWords: testWords,\n    userInputWords: userInputWords,\n    currentWordNum: currentWordNum,\n    currentCharNum: currentCharNum,\n    isTestActive: isTestActive,\n    resetTestState: resetTestState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/App.js"],"names":["React","useState","useRef","Title","Stats","TimerCircle","WordList","Footer","TEST_WORDS","KEYCODE_BACKSPACE","KEYCODE_SPACEBAR","randomWords","App","currentWordNum","setCurrentWordNum","currentCharNum","setCurrentCharNum","userInputWords","setUserInputWords","userInputLength","setUserInputLength","testWords","setTestWords","exactly","isTestActive","setIsTestActive","isTestDone","setIsTestDone","resetTestState","setResetTestWords","typingArea","testComplete","resetTest","onDeletion","e","length","slice","userInputs","onSpacebar","onUserInput","concat","key","handleOnKeyDown","keyCode","handleClick","current","focus"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Title from './Components/Title';\nimport Stats from './Components/Stats';\nimport TimerCircle from './Components/TimerCircle';\nimport WordList from './Components/WordList';\nimport Footer from './Components/Footer';\nimport { TEST_WORDS, KEYCODE_BACKSPACE, KEYCODE_SPACEBAR } from './utils/constants'\nimport randomWords from 'random-words';\nimport './App.css';\n\nconst App = () => {\n  const [currentWordNum, setCurrentWordNum] = useState(0);\n  const [currentCharNum, setCurrentCharNum] = useState(0);\n  const [userInputWords, setUserInputWords] = useState(['']);\n  const [userInputLength, setUserInputLength] = useState(0);\n  const [testWords, setTestWords] = useState(randomWords({ exactly: TEST_WORDS }));\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestDone, setIsTestDone] = useState(false);\n  const [resetTestState, setResetTestWords] = useState(false);\n  const typingArea = useRef(null);\n\n  const testComplete = () => {\n    setIsTestActive(false);\n    setIsTestDone(true);\n  }\n\n  const resetTest = () => {\n    setCurrentWordNum(0);\n    setCurrentCharNum(0);\n    setUserInputWords(['']);\n    setTestWords(randomWords({ exactly: TEST_WORDS }));\n    setIsTestActive(false);\n    setIsTestDone(false);\n    setResetTestWords(true);\n  }\n\n  const onDeletion = (e) => {\n    if (userInputWords.length > 1 && userInputWords[currentWordNum].length === 0) {\n      setUserInputWords(userInputWords.slice(0, -1));\n      setCurrentWordNum(currentWordNum - 1);\n      setCurrentCharNum(userInputWords.slice(0, -1).length);\n    }\n    else if (userInputWords[currentWordNum].length > 0) {\n      setCurrentCharNum(currentCharNum - 1);\n      let userInputs = [...userInputWords];\n      userInputs[currentWordNum] = userInputs[currentWordNum].slice(0, -1);\n      setUserInputWords(userInputs);\n    }\n  }\n\n  const onSpacebar = () => {\n    if (testWords[currentWordNum].length <= userInputWords[currentWordNum].length) {\n      setUserInputWords([...userInputWords, '']);\n      setCurrentWordNum(currentWordNum + 1);\n      setCurrentCharNum(0);\n    }\n  }\n\n  const onUserInput = (e) => {\n    setCurrentCharNum(currentCharNum + 1);\n    let userInputs = [...userInputWords];\n    userInputs[currentWordNum] = userInputs[currentWordNum].concat(e.key);\n    setUserInputWords(userInputs);\n  }\n\n  const handleOnKeyDown = (e) => {\n    if (!isTestActive) {\n      setIsTestActive(true);\n      setResetTestWords(false);\n    }\n    if (e.keyCode === KEYCODE_BACKSPACE) {\n      onDeletion(e);\n    }\n    if (e.keyCode === KEYCODE_SPACEBAR) {\n      onSpacebar();\n    }\n    if (e.keyCode >= 65 && e.keyCode <= 90) {\n      onUserInput(e);\n    }\n  }\n\n  const handleClick = () => {\n    typingArea.current.focus();\n  }\n\n  return (\n    <div onClick={handleClick} className='app'>\n      <input\n        className='input'\n        ref={typingArea}\n        onKeyDown={handleOnKeyDown}\n        type='text'\n        disabled={isTestDone}\n        autoFocus\n      />\n      <div className='app-container'>\n        <Title />\n        <WordList\n          currentWordNum={currentWordNum}\n          currentCharNum={currentCharNum}\n          testWords={testWords}\n          resetTestWords={resetTestState}\n          userInputWords={userInputWords}\n          isTestActive={isTestActive}\n        />\n        <div className='row'>\n          <div className='column'>\n            <TimerCircle\n              isTestActive={isTestActive}\n              isTestDone={isTestDone}\n              testComplete={testComplete}\n              resetTest={resetTest}\n            />\n          </div>\n          <div className='column'>\n            <Stats\n              testWords={testWords}\n              userInputWords={userInputWords}\n              currentWordNum={currentWordNum}\n              currentCharNum={currentCharNum}\n              isTestActive={isTestActive}\n              resetTestState={resetTestState}\n            />\n          </div>\n        </div>\n        <Footer />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n\n\n"]},"metadata":{},"sourceType":"module"}