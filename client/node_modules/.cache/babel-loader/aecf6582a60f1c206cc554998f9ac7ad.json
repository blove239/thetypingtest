{"ast":null,"code":"var _jsxFileName = \"/home/brandon/jsproj/thetypingtest/src/Components/Stats.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../css/stats.css';\n\nconst Stats = ({\n  testWords,\n  userInputWords,\n  currentWordNum,\n  currentCharNum,\n  isTestActive,\n  resetTestState\n}) => {\n  const [charPerMin, setCharPerMin] = useState(0);\n  const [wordPerMin, setWordPerMin] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [totalTypedChars, setTotalTypedChars] = useState(0);\n  const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n  useEffect(() => {\n    let interval = null;\n\n    if (isTestActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 0.1);\n      }, 100);\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, isTestActive]);\n  useEffect(() => {\n    if (resetTestState) {\n      setCharPerMin(0);\n      setWordPerMin(0);\n      setSeconds(0);\n    }\n\n    calcWPM();\n    calcCPM();\n  }, [userInputWords, seconds, resetTestState]);\n  const prevUserInputWordsRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords[currentWordNum];\n    calcAccuracy();\n  }, [userInputWords]);\n  const prevUserInputWords = prevUserInputWordsRef.current;\n\n  const calcWPM = () => {\n    const wpm = Math.round(currentWordNum / seconds * 60);\n    setWordPerMin(Number.isNaN(wpm) ? 0 : wpm);\n  };\n\n  const isCharCorrect = () => {\n    if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n      setTotalCorrectChars(totalCorrectChars + 1);\n      setTotalTypedChars(totalTypedChars + 1);\n    } else {\n      setTotalTypedChars(totalTypedChars + 1);\n    }\n  };\n\n  const calcAccuracy = () => {\n    // deletions don't affect stats\n    if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n      isCharCorrect();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"main\", {\n    className: \"statHolder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"statBoxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"WPM: \", wordPerMin), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"statBoxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"ACC: \", totalTypedChars === 0 ? 0 : Math.round(totalCorrectChars / totalTypedChars * 100), \"%\"));\n};\n\nexport default Stats;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/Stats.js"],"names":["React","useState","useEffect","useRef","Stats","testWords","userInputWords","currentWordNum","currentCharNum","isTestActive","resetTestState","charPerMin","setCharPerMin","wordPerMin","setWordPerMin","seconds","setSeconds","totalTypedChars","setTotalTypedChars","totalCorrectChars","setTotalCorrectChars","interval","setInterval","clearInterval","calcWPM","calcCPM","prevUserInputWordsRef","current","calcAccuracy","prevUserInputWords","wpm","Math","round","Number","isNaN","isCharCorrect","slice","undefined","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport '../css/stats.css';\n\nconst Stats = ({ testWords, userInputWords, currentWordNum, currentCharNum, isTestActive, resetTestState }) => {\n    const [charPerMin, setCharPerMin] = useState(0);\n    const [wordPerMin, setWordPerMin] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    const [totalTypedChars, setTotalTypedChars] = useState(0);\n    const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isTestActive) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 0.1);\n            }, 100);\n        }\n        return () => clearInterval(interval);\n    }, [seconds, isTestActive]);\n\n    useEffect(() => {\n        if (resetTestState) {\n            setCharPerMin(0);\n            setWordPerMin(0);\n            setSeconds(0);\n        }\n        calcWPM();\n        calcCPM();\n    }, [userInputWords, seconds, resetTestState])\n\n    const prevUserInputWordsRef = useRef();\n    useEffect(() => {\n        prevUserInputWordsRef.current = userInputWords[currentWordNum];\n        calcAccuracy();\n    }, [userInputWords])\n    const prevUserInputWords = prevUserInputWordsRef.current;\n\n    const calcWPM = () => {\n        const wpm = Math.round((currentWordNum / seconds) * 60);\n        setWordPerMin((Number.isNaN(wpm)) ? 0 : wpm)\n    }\n\n    const isCharCorrect = () => {\n        if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n            setTotalCorrectChars(totalCorrectChars + 1)\n            setTotalTypedChars(totalTypedChars + 1)\n        } else {\n            setTotalTypedChars(totalTypedChars + 1)\n        }\n    }\n\n    const calcAccuracy = () => {\n        // deletions don't affect stats\n        if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n            isCharCorrect();\n        }\n    }\n\n    return (\n        <main className='statHolder'>\n            <div className='statBoxes'>WPM: {wordPerMin}</div>\n            <div className='statBoxes'>ACC: {totalTypedChars === 0 ? 0 : Math.round((totalCorrectChars / totalTypedChars) * 100)}%</div>\n        </main>\n    );\n}\n\n\nexport default Stats;"]},"metadata":{},"sourceType":"module"}