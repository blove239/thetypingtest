{"ast":null,"code":"import _slicedToArray from\"/home/brandon/jsproj/thetypingtest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from'react';import{AVERAGE_WORD,SIXTY_SECONDS}from'../utils/constants';import'../css/stats.css';var Stats=function Stats(_ref){var testWords=_ref.testWords,userInputWords=_ref.userInputWords,currentWordNum=_ref.currentWordNum,currentCharNum=_ref.currentCharNum,isTestActive=_ref.isTestActive,resetTestState=_ref.resetTestState;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),wordPerMin=_useState2[0],setWordPerMin=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),seconds=_useState4[0],setSeconds=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),totalTypedChars=_useState6[0],setTotalTypedChars=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),totalCorrectChars=_useState8[0],setTotalCorrectChars=_useState8[1];useEffect(function(){var interval=null;if(isTestActive){interval=setInterval(function(){setSeconds(function(seconds){return seconds+0.05;});},50);}return function(){return clearInterval(interval);};},[seconds,isTestActive]);useEffect(function(){if(resetTestState){setWordPerMin(0);setSeconds(0);setTotalTypedChars(0);setTotalCorrectChars(0);}calcWPM();},[userInputWords,seconds,resetTestState]);var prevUserInputWordsRef=useRef();useEffect(function(){prevUserInputWordsRef.current=userInputWords[currentWordNum];calcAccuracy();},[userInputWords]);var prevUserInputWords=prevUserInputWordsRef.current;var calcWPM=function calcWPM(){var wpm=Math.round(totalTypedChars/AVERAGE_WORD/(seconds/SIXTY_SECONDS));setWordPerMin(Number.isNaN(wpm)||!isFinite(wpm)?0:wpm);};var isCharCorrect=function isCharCorrect(){if(userInputWords[currentWordNum].slice(-1)===testWords[currentWordNum][currentCharNum-1]){setTotalCorrectChars(totalCorrectChars+1);setTotalTypedChars(totalTypedChars+1);}else{setTotalTypedChars(totalTypedChars+1);}};var calcAccuracy=function calcAccuracy(){if(prevUserInputWords!==undefined&&!(prevUserInputWords.length>userInputWords[currentWordNum].length)){isCharCorrect();}};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"stat-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"stat-boxes\"},/*#__PURE__*/React.createElement(\"div\",{className:\"stat-heading\"},\"Words Per Min.\"),wordPerMin)),/*#__PURE__*/React.createElement(\"div\",{className:\"stat-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"stat-boxes\"},/*#__PURE__*/React.createElement(\"div\",{className:\"stat-heading\"},\"Accuracy\"),totalTypedChars===0?0:Math.round(totalCorrectChars/totalTypedChars*100),/*#__PURE__*/React.createElement(\"span\",{className:\"percent-sign\"},\"%\"))));};export default Stats;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/Stats.js"],"names":["React","useState","useEffect","useRef","AVERAGE_WORD","SIXTY_SECONDS","Stats","testWords","userInputWords","currentWordNum","currentCharNum","isTestActive","resetTestState","wordPerMin","setWordPerMin","seconds","setSeconds","totalTypedChars","setTotalTypedChars","totalCorrectChars","setTotalCorrectChars","interval","setInterval","clearInterval","calcWPM","prevUserInputWordsRef","current","calcAccuracy","prevUserInputWords","wpm","Math","round","Number","isNaN","isFinite","isCharCorrect","slice","undefined","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { AVERAGE_WORD, SIXTY_SECONDS } from '../utils/constants'\nimport '../css/stats.css';\n\nconst Stats = ({ testWords, userInputWords, currentWordNum, currentCharNum, isTestActive, resetTestState }) => {\n    const [ wordPerMin, setWordPerMin] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    const [totalTypedChars, setTotalTypedChars] = useState(0);\n    const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isTestActive) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 0.05);\n            }, 50);\n        }\n        return () => clearInterval(interval);\n    }, [seconds, isTestActive]);\n\n    useEffect(() => {\n        if (resetTestState) {\n            setWordPerMin(0);\n            setSeconds(0);\n            setTotalTypedChars(0);\n            setTotalCorrectChars(0);\n        }\n        calcWPM();\n    }, [userInputWords, seconds, resetTestState])\n\n    const prevUserInputWordsRef = useRef();\n    useEffect(() => {\n        prevUserInputWordsRef.current = userInputWords[currentWordNum];\n        calcAccuracy();\n    }, [userInputWords])\n    const prevUserInputWords = prevUserInputWordsRef.current;\n\n    const calcWPM = () => {\n        const wpm = Math.round(totalTypedChars / AVERAGE_WORD / (seconds / SIXTY_SECONDS));\n        setWordPerMin((Number.isNaN(wpm) || !isFinite(wpm)) ? 0 : wpm)\n    }\n\n    const isCharCorrect = () => {\n        if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n            setTotalCorrectChars(totalCorrectChars + 1)\n            setTotalTypedChars(totalTypedChars + 1)\n        } else {\n            setTotalTypedChars(totalTypedChars + 1)\n        }\n    }\n\n    const calcAccuracy = () => {\n        if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n            isCharCorrect();\n        }\n    }\n\n    return (\n        <div>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Words Per Min.</div>\n                    {wordPerMin}\n                </div>\n            </div>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Accuracy</div>\n                    {totalTypedChars === 0 ? 0 : Math.round((totalCorrectChars / totalTypedChars) * 100)}\n                    <span className='percent-sign'>%</span>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\n\nexport default Stats;"]},"metadata":{},"sourceType":"module"}