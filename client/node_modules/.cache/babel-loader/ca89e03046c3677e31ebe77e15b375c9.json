{"ast":null,"code":"var _jsxFileName = \"/home/brandon/jsproj/thetypingtest/src/Components/Stats.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AVERAGE_WORD, SIXTY_SECONDS } from '../utils/constants';\nimport '../css/stats.css';\nimport Leaderboard from './Leaderboard';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\n\nconst Stats = ({\n  testWords,\n  userInputWords,\n  currentWordNum,\n  currentCharNum,\n  isTestActive,\n  isTestDone,\n  resetTestState,\n  resetTest\n}) => {\n  const [wordPerMin, setWordPerMin] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [totalTypedChars, setTotalTypedChars] = useState(0);\n  const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n  useEffect(() => {\n    let interval = null;\n\n    if (isTestActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 0.05);\n      }, 50);\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, isTestActive]);\n  useEffect(() => {\n    if (resetTestState) {\n      setWordPerMin(0);\n      setSeconds(0);\n      setTotalTypedChars(0);\n      setTotalCorrectChars(0);\n    }\n\n    calcWPM();\n  }, [userInputWords, seconds, resetTestState]);\n  const prevUserInputWordsRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords[currentWordNum];\n    calcAccuracy();\n  }, [userInputWords]);\n  const prevUserInputWords = prevUserInputWordsRef.current;\n\n  const calcWPM = () => {\n    const wpm = Math.round(totalTypedChars / AVERAGE_WORD / (seconds / SIXTY_SECONDS));\n    setWordPerMin(Number.isNaN(wpm) || !isFinite(wpm) ? 0 : wpm);\n  };\n\n  const isCharCorrect = () => {\n    if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n      setTotalCorrectChars(totalCorrectChars + 1);\n      setTotalTypedChars(totalTypedChars + 1);\n    } else {\n      setTotalTypedChars(totalTypedChars + 1);\n    }\n  };\n\n  const calcAccuracy = () => {\n    if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n      isCharCorrect();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    open: isTestDone,\n    p: true,\n    osition: \"right center\",\n    modal: true,\n    trigger: isTestDone ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"leaderboard-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 35\n      }\n    }, \" Leaderboard \") : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, close => /*#__PURE__*/React.createElement(\"fragment\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Leaderboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: () => {\n      close();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, \"close modal\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-boxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, \"Words Per Min.\"), wordPerMin)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-boxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stat-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, \"Accuracy\"), totalTypedChars === 0 ? 0 : Math.round(totalCorrectChars / totalTypedChars * 100), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"percent-sign\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, \"%\"))));\n};\n\nexport default Stats;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/Stats.js"],"names":["React","useState","useEffect","useRef","AVERAGE_WORD","SIXTY_SECONDS","Leaderboard","Popup","Stats","testWords","userInputWords","currentWordNum","currentCharNum","isTestActive","isTestDone","resetTestState","resetTest","wordPerMin","setWordPerMin","seconds","setSeconds","totalTypedChars","setTotalTypedChars","totalCorrectChars","setTotalCorrectChars","interval","setInterval","clearInterval","calcWPM","prevUserInputWordsRef","current","calcAccuracy","prevUserInputWords","wpm","Math","round","Number","isNaN","isFinite","isCharCorrect","slice","undefined","length","close"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { AVERAGE_WORD, SIXTY_SECONDS } from '../utils/constants'\nimport '../css/stats.css';\nimport Leaderboard from './Leaderboard';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\n\n\nconst Stats = ({ testWords, userInputWords, currentWordNum, currentCharNum, isTestActive, isTestDone, resetTestState, resetTest }) => {\n    const [wordPerMin, setWordPerMin] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    const [totalTypedChars, setTotalTypedChars] = useState(0);\n    const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isTestActive) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 0.05);\n            }, 50);\n        }\n        return () => clearInterval(interval);\n    }, [seconds, isTestActive]);\n\n    useEffect(() => {\n        if (resetTestState) {\n            setWordPerMin(0);\n            setSeconds(0);\n            setTotalTypedChars(0);\n            setTotalCorrectChars(0);\n        }\n        calcWPM();\n    }, [userInputWords, seconds, resetTestState])\n\n    const prevUserInputWordsRef = useRef();\n    useEffect(() => {\n        prevUserInputWordsRef.current = userInputWords[currentWordNum];\n        calcAccuracy();\n    }, [userInputWords])\n    const prevUserInputWords = prevUserInputWordsRef.current;\n\n    const calcWPM = () => {\n        const wpm = Math.round(totalTypedChars / AVERAGE_WORD / (seconds / SIXTY_SECONDS));\n        setWordPerMin((Number.isNaN(wpm) || !isFinite(wpm)) ? 0 : wpm)\n    }\n\n    const isCharCorrect = () => {\n        if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n            setTotalCorrectChars(totalCorrectChars + 1)\n            setTotalTypedChars(totalTypedChars + 1)\n        } else {\n            setTotalTypedChars(totalTypedChars + 1)\n        }\n    }\n\n    const calcAccuracy = () => {\n        if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n            isCharCorrect();\n        }\n    }\n\n    return (\n        <div>\n            <Popup \n            open={isTestDone} p\n            osition='right center' \n            modal\n            trigger={isTestDone ? <button className='leaderboard-button'> Leaderboard </button> : null}\n            >\n                {close => (\n                    <fragment>\n                        <Leaderboard />\n            \n                        <button\n                            className=\"button\"\n                            onClick={() => {\n                                close();\n                            }}\n                        >\n                            close modal\n                        </button>\n                    </fragment>\n                )\n                }\n            </Popup>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Words Per Min.</div>\n                    {wordPerMin}\n                </div>\n            </div>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Accuracy</div>\n                    {totalTypedChars === 0 ? 0 : Math.round((totalCorrectChars / totalTypedChars) * 100)}\n                    <span className='percent-sign'>%</span>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Stats;"]},"metadata":{},"sourceType":"module"}