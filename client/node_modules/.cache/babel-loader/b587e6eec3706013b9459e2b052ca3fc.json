{"ast":null,"code":"var _jsxFileName = \"/home/brandon/jsproj/thetypingtest/src/Components/Word.js\";\nimport React, { useState, useEffect, createRef, useRef } from 'react';\nimport Char from './Char';\nimport '../css/word.css';\n\nconst Word = ({\n  word,\n  isCurrentWord,\n  userInputWords,\n  currentWordNum,\n  resetTestState,\n  isTestActive\n}) => {\n  const charList = word.split('').map((char, i) => {\n    return {\n      char: char,\n      style: 'default',\n      key: i\n    };\n  });\n  const [chars, setChars] = useState(charList);\n  const scrollRef = createRef();\n  const prevUserInputWordsRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords[currentWordNum];\n  }, [userInputWords]);\n  const prevUserInputWords = prevUserInputWordsRef.current;\n\n  const updateCharStyles = () => {\n    if (userInputWords[currentWordNum].length - 1 <= word.length && isTestActive) {\n      const newChars = chars.map((charInstance, i) => {\n        const inputChar = userInputWords[currentWordNum][i];\n        const newChar = { ...charInstance,\n          style: 'default'\n        };\n\n        if (charInstance.char === inputChar) {\n          newChar.style = 'correctChar';\n        } else if (inputChar && inputChar !== charInstance.char) {\n          newChar.style = 'incorrectChar';\n        }\n\n        return newChar;\n      });\n      setChars(newChars);\n    }\n\n    if (userInputWords[currentWordNum].length >= word.length && prevUserInputWords.length > userInputWords[currentWordNum].length) {\n      setChars(chars => chars.slice(0, -1));\n    } else if (userInputWords[currentWordNum].length > word.length) {\n      setChars(chars => chars.concat({\n        char: userInputWords[currentWordNum].slice(-1),\n        style: 'incorrectChar',\n        key: chars.length\n      }));\n    }\n  };\n\n  useEffect(() => {\n    if (resetTestState) {\n      setChars(charList);\n    }\n\n    if (isCurrentWord) {\n      scrollRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n      updateCharStyles();\n    }\n  }, [userInputWords, currentWordNum, resetTestState]);\n\n  const renderChar = (key, char, style) => {\n    return /*#__PURE__*/React.createElement(Char, {\n      key: key,\n      style: style,\n      char: char,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    ref: scrollRef,\n    className: isCurrentWord ? 'currentWord' : 'default',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, chars.map(x => renderChar(x.key, x.char, x.style)));\n};\n\nexport default Word;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/Components/Word.js"],"names":["React","useState","useEffect","createRef","useRef","Char","Word","word","isCurrentWord","userInputWords","currentWordNum","resetTestState","isTestActive","charList","split","map","char","i","style","key","chars","setChars","scrollRef","prevUserInputWordsRef","current","prevUserInputWords","updateCharStyles","length","newChars","charInstance","inputChar","newChar","slice","concat","scrollIntoView","behavior","block","renderChar","x"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createRef, useRef } from 'react';\nimport Char from './Char';\nimport '../css/word.css';\n\nconst Word = ({ word, isCurrentWord, userInputWords, currentWordNum, resetTestState, isTestActive }) => {\n  const charList = word.split('').map((char, i) => {\n    return {\n      char: char,\n      style: 'default',\n      key: i\n    };\n  });\n\n  const [chars, setChars] = useState(charList);\n  const scrollRef = createRef();\n\n  const prevUserInputWordsRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords[currentWordNum];\n  }, [userInputWords])\n\n  const prevUserInputWords = prevUserInputWordsRef.current;\n\n  const updateCharStyles = () => {\n    if (userInputWords[currentWordNum].length - 1 <= word.length && isTestActive) {\n      const newChars = chars.map((charInstance, i) => {\n        const inputChar = userInputWords[currentWordNum][i];\n        const newChar = {\n          ...charInstance,\n          style:'default'\n        };\n        if (charInstance.char === inputChar) {\n          newChar.style = 'correctChar'\n        } else if (inputChar && inputChar !== charInstance.char) {\n          newChar.style = 'incorrectChar'\n        }\n        return newChar;\n      })\n      setChars(newChars);\n    } if (userInputWords[currentWordNum].length >= word.length &&(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n      setChars(chars => chars.slice(0, -1))\n    } else if (userInputWords[currentWordNum].length > word.length) {\n      setChars(chars => chars.concat({\n        char: userInputWords[currentWordNum].slice(-1),\n        style: 'incorrectChar',\n        key: chars.length\n      }))\n    }\n  }\n\n  useEffect(() => {\n    if (resetTestState) {\n      setChars(charList);\n    }\n    if (isCurrentWord) {\n      scrollRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n      });\n      updateCharStyles();\n    }\n  }, [userInputWords, currentWordNum, resetTestState])\n\n  const renderChar = (key, char, style) => {\n    return (\n      <Char\n        key={key}\n        style={style}\n        char={char}\n      />\n    );\n  };\n\n  return (\n    <li ref={scrollRef} className={(isCurrentWord) ? 'currentWord' : 'default'}>\n      {chars.map(x => renderChar(x.key, x.char, x.style))}\n    </li>\n  );\n};\n\nexport default Word;\n"]},"metadata":{},"sourceType":"module"}