{"ast":null,"code":"var _jsxFileName = \"/home/brandon/jsproj/thetypingtest/src/App.js\";\nimport React, { useState, useRef } from 'react';\nimport Stats from './Components/Stats';\nimport TimerBar from './Components/TimerBar';\nimport WordList from './Components/WordList';\nimport randomWords from 'random-words';\nimport './App.css';\n\nconst App = () => {\n  const typingArea = useRef(null);\n  const [currentWordNum, setCurrentWordNum] = useState(0);\n  const [currentCharNum, setCurrentCharNum] = useState(0);\n  const [userInputWords, setUserInputWords] = useState(['']);\n  const [testWords, setTestWords] = useState(randomWords({\n    exactly: 250\n  }));\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestDone, setIsTestDone] = useState(false);\n  const [resetTestState, setResetTestWords] = useState(false);\n\n  const testComplete = () => {\n    setIsTestActive(false);\n    setIsTestDone(true);\n  };\n\n  const resetTest = () => {\n    setCurrentWordNum(0);\n    setCurrentCharNum(0);\n    setUserInputWords(['']);\n    setTestWords(randomWords({\n      exactly: 250\n    }));\n    setIsTestActive(false);\n    setIsTestDone(false);\n    setResetTestWords(true);\n    handleClick();\n  };\n\n  const onDeletion = e => {\n    if (userInputWords.length > 1 && userInputWords[currentWordNum].length === 0) {\n      setUserInputWords(userInputWords.slice(0, -1));\n      setCurrentWordNum(currentWordNum - 1);\n      setCurrentCharNum(userInputWords.slice(0, -1).length);\n    } else if (userInputWords[currentWordNum].length > 0) {\n      setCurrentCharNum(currentCharNum - 1);\n      let userInputs = [...userInputWords];\n      userInputs[currentWordNum] = userInputs[currentWordNum].slice(0, -1);\n      setUserInputWords(userInputs);\n    }\n  };\n\n  const onSpacebar = e => {\n    if (testWords[currentWordNum].length <= userInputWords[currentWordNum].length) {\n      setUserInputWords([...userInputWords, '']);\n      setCurrentWordNum(currentWordNum + 1);\n      setCurrentCharNum(0);\n    }\n  };\n\n  const onUserInput = e => {\n    setCurrentCharNum(currentCharNum + 1);\n    let userInputs = [...userInputWords];\n    userInputs[currentWordNum] = userInputs[currentWordNum].concat(e.key);\n    setUserInputWords(userInputs);\n  };\n\n  const handleOnKeyPress = e => {\n    if (!isTestActive) {\n      setIsTestActive(true);\n      setResetTestWords(false);\n    }\n\n    if (e.key === ' ') {\n      onSpacebar(e);\n    } else {\n      onUserInput(e);\n    }\n  };\n\n  const handleOnKeyDown = e => {\n    if (e.key === \"Backspace\") {\n      onDeletion(e);\n    }\n  };\n\n  const handleClick = () => {\n    typingArea.current.focus();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleClick,\n    style: {\n      width: '100vw',\n      height: '100vh',\n      margin: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Stats, {\n    testWords: testWords,\n    userInputWords: userInputWords,\n    currentWordNum: currentWordNum,\n    currentCharNum: currentCharNum,\n    isTestActive: isTestActive,\n    resetTestState: resetTestState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(WordList, {\n    currentWordNum: currentWordNum,\n    currentCharNum: currentCharNum,\n    testWords: testWords,\n    resetTestWords: resetTestState,\n    userInputWords: userInputWords,\n    isTestActive: isTestActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerBar, {\n    isTestActive: isTestActive,\n    isTestDone: isTestDone,\n    testComplete: testComplete,\n    resetTest: resetTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    ref: typingArea,\n    className: \"input\",\n    onKeyPress: handleOnKeyPress,\n    onKeyDown: handleOnKeyDown,\n    type: \"text\",\n    disabled: isTestDone,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/brandon/jsproj/thetypingtest/src/App.js"],"names":["React","useState","useRef","Stats","TimerBar","WordList","randomWords","App","typingArea","currentWordNum","setCurrentWordNum","currentCharNum","setCurrentCharNum","userInputWords","setUserInputWords","testWords","setTestWords","exactly","isTestActive","setIsTestActive","isTestDone","setIsTestDone","resetTestState","setResetTestWords","testComplete","resetTest","handleClick","onDeletion","e","length","slice","userInputs","onSpacebar","onUserInput","concat","key","handleOnKeyPress","handleOnKeyDown","current","focus","width","height","margin"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Stats from './Components/Stats'\nimport TimerBar from './Components/TimerBar';\nimport WordList from './Components/WordList';\nimport randomWords from 'random-words';\n\nimport './App.css';\n\nconst App = () => {\n  const typingArea = useRef(null);\n  const [currentWordNum, setCurrentWordNum] = useState(0);\n  const [currentCharNum, setCurrentCharNum] = useState(0);\n  const [userInputWords, setUserInputWords] = useState(['']);\n  const [testWords, setTestWords] = useState(randomWords({ exactly: 250 }));\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestDone, setIsTestDone] = useState(false);\n  const [resetTestState, setResetTestWords] = useState(false);\n\n  const testComplete = () => {\n    setIsTestActive(false);\n    setIsTestDone(true);\n  }\n\n  const resetTest = () => {\n    setCurrentWordNum(0);\n    setCurrentCharNum(0);\n    setUserInputWords(['']);\n    setTestWords(randomWords({ exactly: 250 }));\n    setIsTestActive(false);\n    setIsTestDone(false);\n    setResetTestWords(true);\n    handleClick();\n  }\n\n  const onDeletion = (e) => {\n    if (userInputWords.length > 1 && userInputWords[currentWordNum].length === 0) {\n      setUserInputWords(userInputWords.slice(0, -1));\n      setCurrentWordNum(currentWordNum - 1);\n      setCurrentCharNum(userInputWords.slice(0, -1).length);\n    }\n    else if (userInputWords[currentWordNum].length > 0) {\n      setCurrentCharNum(currentCharNum - 1);\n      let userInputs = [...userInputWords];\n      userInputs[currentWordNum] = userInputs[currentWordNum].slice(0, -1);\n      setUserInputWords(userInputs);\n    }\n  }\n\n  const onSpacebar = (e) => {\n    if (testWords[currentWordNum].length <= userInputWords[currentWordNum].length) {\n      setUserInputWords([...userInputWords, '']);\n      setCurrentWordNum(currentWordNum + 1);\n      setCurrentCharNum(0);\n    }\n  }\n\n  const onUserInput = (e) => {\n    setCurrentCharNum(currentCharNum + 1);\n    let userInputs = [...userInputWords];\n    userInputs[currentWordNum] = userInputs[currentWordNum].concat(e.key);\n    setUserInputWords(userInputs);\n  }\n\n  const handleOnKeyPress = (e) => {\n    if (!isTestActive) {\n      setIsTestActive(true);\n      setResetTestWords(false);\n    } if (e.key === ' ') {\n      onSpacebar(e);\n    } else {\n      onUserInput(e);\n    }\n  }\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === \"Backspace\") {\n      onDeletion(e);\n    }\n  }\n\n  const handleClick = () => {\n    typingArea.current.focus();\n  }\n\n  return (\n    <div onClick={handleClick} style={{ width: '100vw', height: '100vh', margin: 5 }}>\n      <Stats\n        testWords={testWords}\n        userInputWords={userInputWords}\n        currentWordNum={currentWordNum}\n        currentCharNum={currentCharNum}\n        isTestActive={isTestActive}\n        resetTestState={resetTestState}\n      />\n      <WordList\n        currentWordNum={currentWordNum}\n        currentCharNum={currentCharNum}\n        testWords={testWords}\n        resetTestWords={resetTestState}\n        userInputWords={userInputWords}\n        isTestActive={isTestActive}\n      />\n      <TimerBar\n        isTestActive={isTestActive}\n        isTestDone={isTestDone}\n        testComplete={testComplete}\n        resetTest={resetTest}\n      />\n      <input\n        ref={typingArea}\n        className='input'\n        onKeyPress={handleOnKeyPress}\n        onKeyDown={handleOnKeyDown}\n        type=\"text\"\n        disabled={isTestDone}\n        autoFocus\n      />\n    </div>\n  )\n}\n\nexport default App\n\n\n\n"]},"metadata":{},"sourceType":"module"}