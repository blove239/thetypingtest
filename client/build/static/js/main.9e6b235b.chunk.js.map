{"version":3,"sources":["Components/Title.js","Components/Leaderboard.js","utils/constants.js","Components/Stats.js","Components/TimerCircle.js","Components/Char.js","Components/Word.js","Components/WordList.js","Components/Footer.js","App.js","index.js"],"names":["Title","className","icon","faKeyboard","NetWPMToolTip","nested","modal","trigger","faQuestionCircle","Leaderboard","wordPerMin","incorrectEntries","isTestDone","isSubmitted","setIsSubmitted","useState","leaderboard","setLeaderboard","fetchedLeaderboard","setFetchedLeaderboard","name","setName","netWPM","ip","setIp","isNameLenValid","setIsNameLenValid","isNameAlphaNum","setIsNameAlphaNum","isNameClean","setIsNameClean","submitting","setSubmitting","userPostId","setUserPostId","cannotConnect","setCannotConnect","re","RegExp","API_URL","process","filter","Filter","getLeaderboard","a","fetch","response","json","jsonData","error","getIP","publicIp","v4","userIp","submitScore","e","preventDefault","length","test","isProfane","postRequestOptions","method","headers","body","JSON","stringify","location","mobile","isMobile","then","data","useEffect","scoreScrollRef","useRef","undefined","current","scrollIntoView","onSubmit","placeholder","type","value","onChange","target","disabled","faArrowCircleRight","map","index","_id","message","ref","Stats","testWords","userInputWords","currentWordNum","currentCharNum","isTestActive","resetTestState","resetTest","setWordPerMin","seconds","setSeconds","totalTypedChars","setTotalTypedChars","totalCorrectChars","setTotalCorrectChars","setInCorrectEntries","interval","setInterval","clearInterval","calcInCorrectEntires","calcWPM","prevUserInputWordsRef","calcAccuracy","prevUserInputWords","currentlyIncorrect","forEach","word","i","wpm","Math","round","Number","isNaN","isFinite","slice","open","close","onClick","faTimesCircle","RenderTime","remainingTime","resetCircle","onMouseDown","TimerCircle","testComplete","key","setKey","window","matchMedia","matches","timerSize","setTimerSize","handleResize","addEventListener","isPlaying","duration","colors","size","onComplete","Char","style","char","Word","isCurrentWord","charList","split","chars","setChars","scrollRef","createRef","prevCurrentWordNumRef","prevCurrentWordNum","block","newChars","charInstance","inputChar","newChar","concat","updateCharStyles","x","areEqual","prevProps","nextProps","memo","WordList","resetTestWords","isCurrent","renderWord","Footer","href","faGithub","App","setCurrentWordNum","setCurrentCharNum","setUserInputWords","userInput","setUserInput","randomWords","exactly","setTestWords","setIsTestActive","setIsTestDone","setResetTestWords","typingArea","focus","onKeyDown","keyCode","userInputs","onDeletion","lastTypedChar","onUserInput","autoFocus","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e6b235b.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/title.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faKeyboard } from '@fortawesome/free-solid-svg-icons';\n\nconst Title = () => {\n    return (\n        <div className='title'>\n            <FontAwesomeIcon icon={faKeyboard}/> Typing{' '}\n            <span className='page-title-bold'>Test</span>\n        </div>\n    );\n};\n\nexport default Title;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { NAME_MIN_LEN, NAME_MAX_LEN } from '../utils/constants'\nimport { isMobile } from 'react-device-detect';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowCircleRight, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport Filter from 'bad-words';\nimport publicIp from 'public-ip';\nimport '../css/leaderboard.css';\n\nconst Leaderboard = ({ wordPerMin, incorrectEntries, isTestDone, isSubmitted, setIsSubmitted }) => {\n    const [leaderboard, setLeaderboard] = useState(null);\n    const [fetchedLeaderboard, setFetchedLeaderboard] = useState(false)\n    const [name, setName] = useState('');\n    const [netWPM] = useState(wordPerMin - incorrectEntries);\n    const [ip, setIp] = useState('Unknown');\n    const [isNameLenValid, setIsNameLenValid] = useState(true);\n    const [isNameAlphaNum, setIsNameAlphaNum] = useState(true);\n    const [isNameClean, setIsNameClean] = useState(true);\n    const [submitting, setSubmitting] = useState(false);\n    const [userPostId, setUserPostId] = useState(null);\n    const [cannotConnect, setCannotConnect] = useState(false);\n    \n    const re = new RegExp(/^[a-z\\d\\-_\\s]+$/, 'i');\n    const API_URL = process.env.REACT_APP_API_URL;\n    const filter = new Filter();\n\n    const getLeaderboard = async () => {\n        try {\n            const response = await fetch(API_URL);\n            const jsonData = await response.json();\n            if (response && !response.error) {\n                setLeaderboard(jsonData);\n                setFetchedLeaderboard(true);\n            }\n        } catch (err) {\n            setCannotConnect(true);\n        }\n    };\n\n    const getIP = async () => {\n        try {\n            const userIp = await publicIp.v4();\n            setIp(userIp);\n        }\n        catch (err) {\n            setCannotConnect(true);\n        }\n    }\n\n    const submitScore = async (e) => {\n        e.preventDefault();\n        if (name.length < NAME_MIN_LEN || name.length > NAME_MAX_LEN) {\n            setIsNameLenValid(false);\n        }\n        else if (re.test(name) !== true && name !== '') {\n            setIsNameAlphaNum(false);\n        }\n        else if (filter.isProfane(name)) {\n            setIsNameClean(false);\n        }\n        else {\n            const postRequestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    name: name,\n                    netWPM: netWPM,\n                    location: 'Unknown',\n                    mobile: isMobile,\n                    ip: ip,\n                })\n            };\n            setSubmitting(true);\n            setFetchedLeaderboard(false);\n            try {\n                await fetch(API_URL, postRequestOptions)\n                    .then(response => response.json())\n                    .then((data) => {\n                        setUserPostId(data)\n                    });\n                await getLeaderboard();\n                setSubmitting(false);\n                setIsSubmitted(true);\n            }\n            catch (err) {\n                setIsSubmitted(false);\n            }\n        }\n    }\n    \n    useEffect(() => {\n        getLeaderboard();\n        getIP();\n    }, []);\n    const scoreScrollRef = useRef();\n\n    const executeScroll = () => {\n        if (!(scoreScrollRef.current === undefined)) {\n            scoreScrollRef.current.scrollIntoView({\n            });\n        }\n    }\n\n    useEffect(() => {\n        executeScroll();\n    }, [isSubmitted]);\n\n    return (\n        <div className='leaderboard-popup'>\n            {(!isSubmitted && isTestDone) ? <>\n                <div className='row '>\n                    <div className='column'>\n                        <h2 className='leaderboard-sub-heading'>Submit your result</h2>\n                        <span className='leaderboard-sub-heading'>Enter your name below to submit your result</span>\n                        <form onSubmit={submitScore}>\n                            <input\n                                className='name-input leaderboard-sub-heading'\n                                placeholder='Your Name'\n                                type='text'\n                                value={name}\n                                onChange={e => setName(e.target.value)}\n                            />\n                            <button\n                                type='submit'\n                                className='submit-button'\n                                disabled={submitting}\n                            >\n                                <FontAwesomeIcon icon={faArrowCircleRight} />\n                            </button>\n                            {isNameLenValid ? null :\n                                <div className='name-valid-warning'>Names must be at least two characters and no more than 32 characters in length</div>}\n                            {isNameAlphaNum ? null :\n                                <div className='name-valid-warning'>Names may only contain alphanumerical characters, space, _ or -</div>}\n                            {isNameClean ? null :\n                                <div className='name-valid-warning'>Names may not contain profanities.</div>}\n                        </form>\n                    </div>\n                    <div className='column'>\n                        <div className='stat-container'>\n                            <div className='stat-boxes'>\n                                <div className='stat-heading'>Your Result</div>\n                                {netWPM}\n                                <div className='align-right'>Net WPM</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </> : null}\n            <h1 className='leaderboard-heading'>Leaderboard</h1>\n            {cannotConnect ? <div>Cannot connect to the leaderboard, please try again later! </div> : null}\n            <table className='leaderboard-results'>\n                <tbody>\n                    <tr>\n                        <th className='table-col-1'>Position</th>\n                        <th className='table-col-2'>Name</th>\n                        <th className='table-col-3'>Net WPM <NetWPMToolTip /></th>\n                    </tr>\n                    {fetchedLeaderboard ?\n                        leaderboard.map((data, index) => {\n                            if (userPostId !== null && data._id === userPostId.message) {\n                                return (\n                                    <tr className='current-score' ref={scoreScrollRef} key={index}>\n                                        <td className='table-col-1'>{index + 1}</td>\n                                        <td className='table-col-2'>{data.name}</td>\n                                        <td className='table-col-3'>{data.netWPM}</td>\n                                    </tr>)\n                            } else {\n                                return (\n                                    <tr key={index}>\n                                        <td className='table-col-1'>{index + 1}</td>\n                                        <td className='table-col-2'>{data.name}</td>\n                                        <td className='table-col-3'>{data.netWPM}</td>\n                                    </tr>)\n                            }\n                        }) : null\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst NetWPMToolTip = () => (\n    <Popup\n        nested\n        modal\n        trigger={<button className='netWPM-tooltip-button'> <FontAwesomeIcon icon={faQuestionCircle} /> </button>}\n    >\n        <div> Net words per minute is determined by measuring a typist's gross speed in words per minute and subtracting any uncorrected errors made during that period.</div>\n    </Popup>\n);\n\nexport default Leaderboard;\n","export const AVERAGE_WORD = 5;\nexport const SIXTY_SECONDS = 60;\nexport const TEST_WORDS = 250;\nexport const SMALL_SIZE = 90;\nexport const LARGE_SIZE = 150;\nexport const KEYCODE_BACKSPACE = 8;\nexport const NAME_MIN_LEN = 2; \nexport const NAME_MAX_LEN = 32;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { AVERAGE_WORD, SIXTY_SECONDS } from '../utils/constants'\nimport Leaderboard from './Leaderboard';\nimport Popup from 'reactjs-popup';\nimport '../css/stats.css';\nimport 'reactjs-popup/dist/index.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst Stats = ({ testWords, userInputWords, currentWordNum, currentCharNum, isTestActive, isTestDone, resetTestState, resetTest }) => {\n    const [wordPerMin, setWordPerMin] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    const [totalTypedChars, setTotalTypedChars] = useState(0);\n    const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n    const [incorrectEntries, setInCorrectEntries] = useState(0);\n    const [isSubmitted, setIsSubmitted] = useState(false);\n\n    useEffect(() => {\n        let interval = null;\n        if (isTestActive) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 0.05);\n            }, 50);\n        }\n        return () => clearInterval(interval);\n    }, [seconds, isTestActive]);\n\n    useEffect(() => {\n        if (resetTestState) {\n            setWordPerMin(0);\n            setSeconds(0);\n            setTotalTypedChars(0);\n            setTotalCorrectChars(0);\n            setIsSubmitted(false);\n        }\n        calcInCorrectEntires();\n        calcWPM();\n    }, [userInputWords, seconds, resetTestState])\n\n    const prevUserInputWordsRef = useRef();\n    useEffect(() => {\n        prevUserInputWordsRef.current = userInputWords[currentWordNum];\n        calcAccuracy();\n    }, [userInputWords]);\n\n    const prevUserInputWords = prevUserInputWordsRef.current;\n\n    const calcInCorrectEntires = () => {\n        let currentlyIncorrect = 0;\n        userInputWords.forEach((word, index) => {\n            for (let i = 0; i < word.length; i++) {\n                if (word[i] !== testWords[index][i]) {\n                    currentlyIncorrect += 1;\n                }\n            }\n        });\n        setInCorrectEntries(currentlyIncorrect);\n    }\n\n    const calcWPM = () => {\n        const wpm = Math.round(totalTypedChars / AVERAGE_WORD / (seconds / SIXTY_SECONDS));\n        setWordPerMin((Number.isNaN(wpm) || !isFinite(wpm)) ? 0 : wpm)\n    }\n\n    const isCharCorrect = () => {\n        if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n            setTotalCorrectChars(totalCorrectChars + 1)\n            setTotalTypedChars(totalTypedChars + 1)\n        } else {\n            setTotalTypedChars(totalTypedChars + 1)\n        }\n    }\n\n    const calcAccuracy = () => {\n        if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n            isCharCorrect();\n        }\n    }\n\n    return (\n        <div>\n            <Popup\n                open={isTestDone}\n                modal\n                nested\n                className='my-popup'\n                trigger={<button className='leaderboard-button'> Leaderboard </button>}\n            >\n                {close => (\n                    <div>\n                        <Leaderboard\n                            wordPerMin={wordPerMin}\n                            incorrectEntries={incorrectEntries}\n                            isTestDone={isTestDone}\n                            isSubmitted={isSubmitted}\n                            setIsSubmitted={setIsSubmitted}\n                        />\n                        <button\n                            className=\"leaderboard-close\"\n                            type='submit'\n                            onClick={() => {\n                                close();\n                            }}\n                        >\n                            <FontAwesomeIcon icon={faTimesCircle} />\n                        </button>\n                    </div>\n                )}\n            </Popup>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Words Per Min.</div>\n                    {wordPerMin}\n                </div>\n            </div>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Accuracy</div>\n                    {totalTypedChars === 0 ? 0 : Math.round((totalCorrectChars / totalTypedChars) * 100)}\n                    <span className='percent-sign'>%</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Stats;\n","import React, { useEffect, useState } from 'react';\nimport { SIXTY_SECONDS, SMALL_SIZE, LARGE_SIZE } from '../utils/constants'\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport '../css/timercircle.css';\n\nconst RenderTime = ({ remainingTime, resetTest, resetCircle }) => {\n  if (remainingTime === 0) {\n    return (\n    <button className='reset-button'\n      onMouseDown={(e) => {\n        e.preventDefault();\n        resetTest();  \n        resetCircle();\n      }}> Click Here to Start Over! </button>\n    );\n  } else {\n    return (\n      <div className='timer'>\n        <div className='value'>{remainingTime}</div>\n        <div className='text'>seconds</div>\n      </div>\n    );\n  }\n};\n\nconst TimerCircle = ({ isTestActive, testComplete, resetTest, isTestDone }) => {\n  const [key, setKey] = useState(0);\n  const resetCircle = () => { \n    setKey(key => key + 1);\n  }\n\n  const [timerSize, setTimerSize] = useState(window.matchMedia('(max-width: 768px)').matches\n    ? SMALL_SIZE : LARGE_SIZE);\n\n  useEffect(() => {\n    function handleResize() {\n      if (window.matchMedia('(max-width: 768px)').matches) {\n        setTimerSize(SMALL_SIZE);\n      } else {\n        setTimerSize(LARGE_SIZE);\n      }\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  });\n\n  return (\n    <div className='timer-wrapper'>\n      <CountdownCircleTimer\n        key={key}\n        isPlaying={isTestActive}\n        duration={SIXTY_SECONDS}\n        colors={[\n          ['#4CC053', 0.415],\n          ['#FFD300', 0.415],\n          ['#FF554c', 0.17],\n        ]}\n        size={timerSize}\n        onComplete={() => testComplete()}\n      >\n        {<RenderTime\n          resetTest={resetTest}\n          resetCircle={resetCircle}\n        />}\n      </CountdownCircleTimer>\n    </div>\n  );\n};\n\nexport default TimerCircle;","import React from 'react';\nimport '../css/char.css';\n\nconst Char = ({ style, char }) => {\n    return (\n        <span className={style}>{char}</span>\n    )\n}\nexport default Char;","import React, { useState, useEffect, createRef, useRef, memo } from 'react';\nimport Char from './Char';\nimport '../css/word.css';\n\nconst Word = ({ word, isCurrentWord, userInputWords, currentWordNum, resetTestState, isTestActive }) => {\n  const charList = word.split('').map((char, i) => {\n    return {\n      char: char,\n      style: 'default',\n      key: i\n    };\n  });\n  const [chars, setChars] = useState(charList);\n  const scrollRef = createRef();\n\n  const prevUserInputWordsRef = useRef();\n  const prevCurrentWordNumRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords;\n    prevCurrentWordNumRef.current = currentWordNum;\n  }, [userInputWords, currentWordNum])\n\n  const prevUserInputWords = prevUserInputWordsRef.current;\n  const prevCurrentWordNum = prevCurrentWordNumRef.current;\n\n  const updateCharStyles = () => {\n    if (userInputWords.length <= word.length && isTestActive) {\n      const newChars = chars.map((charInstance, i) => {\n        const inputChar = userInputWords[i];\n        const newChar = {\n          ...charInstance,\n          style: 'default'\n        };\n        if (charInstance.char === inputChar) {\n          newChar.style = 'correct-char'\n        } else if (inputChar && inputChar !== charInstance.char) {\n          newChar.style = 'incorrect-char'\n        }\n        return newChar;\n      })\n      setChars(newChars);\n    }\n    if (userInputWords.length >= word.length &&\n      (prevUserInputWords.length > userInputWords.length)) {\n      setChars(chars => chars.slice(0, -1))\n    }\n    else if (userInputWords.length > word.length) {\n      setChars(chars => chars.concat({\n        char: userInputWords.slice(-1),\n        style: 'incorrect-char',\n        key: chars.length\n      }))\n    }\n  }\n\n  useEffect(() => {\n    if (resetTestState) {\n      setChars(charList);\n    }\n    if (isCurrentWord) {\n      scrollRef.current.scrollIntoView({\n        block: 'center'\n      });\n    }\n    if (isCurrentWord && prevCurrentWordNum === currentWordNum) {\n      updateCharStyles();\n    }\n  }, [userInputWords, currentWordNum, resetTestState])\n\n  const renderChar = (key, char, style) => {\n    return (\n      <Char\n        key={key}\n        style={style}\n        char={char}\n      />\n    );\n  };\n  return (\n    <li ref={scrollRef} className={(isCurrentWord) ? 'current-word li-word' : 'default li-word'}>\n      {chars.map(x => renderChar(x.key, x.char, x.style))}\n    </li>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (nextProps.resetTestState) {\n    return false;\n  }\n  else if (nextProps.currentWordNum + 1 === nextProps.index) {\n    return false;\n  }\n  else if (nextProps.currentWordNum === nextProps.index) {\n    return false;\n  }\n  else if (nextProps.currentWordNum - 1 === nextProps.index) {\n    return false\n  } else {\n    return true;\n  }\n};\n\nexport default memo(Word, areEqual);\n","import React from 'react';\nimport Word from './Word';\nimport '../css/wordlist.css';\n\nconst WordList = ({ userInputWords, currentWordNum, testWords, resetTestWords: resetTestState, isTestActive }) => {\n    const renderWord = (key, word, isCurrent) => {\n        return (\n            <Word\n                key={key}\n                index={key}\n                word={word}\n                isCurrentWord={isCurrent}\n                currentWordNum={currentWordNum}\n                resetTestState={resetTestState}\n                userInputWords={userInputWords[currentWordNum]}\n                isTestActive={isTestActive}\n            />\n        )\n    }\n\n    return (\n        <div className='wordlist-wrapper'>\n            { testWords.map((word, index) =>\n                renderWord(index, word, (index === currentWordNum) ? true : false))}\n        </div>\n    );\n}\n\nexport default WordList;\n","import React from 'react';\nimport '../css/footer.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nconst Footer = () => {\n  return (\n    <div className='page-footer'>\n      <a href='https://github.com/blove239/thetypingtest'>\n        <FontAwesomeIcon icon={faGithub} />\n      </a>{' '}\n      / Made by{' '}\n      <a href=\"http://brandonlove.ca\">Brandon Love.</a>\n    </div>\n  );\n};\n\nexport default Footer;","import React, { useState, useRef } from 'react';\nimport Title from './Components/Title';\nimport Stats from './Components/Stats';\nimport TimerCircle from './Components/TimerCircle';\nimport WordList from './Components/WordList';\nimport Footer from './Components/Footer';\nimport { TEST_WORDS, KEYCODE_BACKSPACE } from './utils/constants'\nimport randomWords from 'random-words';\nimport './App.css';\n\nconst App = () => {\n  const [currentWordNum, setCurrentWordNum] = useState(0);\n  const [currentCharNum, setCurrentCharNum] = useState(0);\n  const [userInputWords, setUserInputWords] = useState(['']);\n  const [userInput, setUserInput] = useState('');\n  const [testWords, setTestWords] = useState(randomWords({ exactly: TEST_WORDS }));\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestDone, setIsTestDone] = useState(false);\n  const [resetTestState, setResetTestWords] = useState(false);\n  const typingArea = useRef(null);\n\n  const testComplete = () => {\n    setIsTestActive(false);\n    setIsTestDone(true);\n  }\n\n  const resetTest = () => {\n    setCurrentWordNum(0);\n    setCurrentCharNum(0);\n    setUserInputWords(['']);\n    setUserInput('');\n    setTestWords(randomWords({ exactly: TEST_WORDS }));\n    setIsTestActive(false);\n    setIsTestDone(false);\n    setResetTestWords(true);\n  }\n\n  const onDeletion = () => {\n    if (userInputWords.length > 1 && userInputWords[currentWordNum].length === 0) {\n      setUserInputWords(userInputWords.slice(0, -1));\n      setCurrentWordNum(currentWordNum - 1);\n      setCurrentCharNum(userInputWords.slice(0, -1).length);\n    }\n    else if (userInputWords[currentWordNum].length > 0) {\n      setCurrentCharNum(currentCharNum - 1);\n      let userInputs = [...userInputWords];\n      userInputs[currentWordNum] = userInputs[currentWordNum].slice(0, -1);\n      setUserInputWords(userInputs);\n    }\n  }\n\n  const onSpacebar = () => {\n    if (testWords[currentWordNum].length <= userInputWords[currentWordNum].length) {\n      setUserInputWords([...userInputWords, '']);\n      setCurrentWordNum(currentWordNum + 1);\n      setCurrentCharNum(0);\n    }\n  }\n\n  const onUserInput = (char) => {\n    setCurrentCharNum(currentCharNum + 1);\n    let userInputs = [...userInputWords];\n    userInputs[currentWordNum] = userInputs[currentWordNum].concat(char);\n    setUserInputWords(userInputs);\n  }\n\n  const handleOnKeyDown = (e) => {\n    if (e.keyCode === KEYCODE_BACKSPACE) {\n      onDeletion();\n    }\n  }\n\n  const handleOnChange = (e) => {\n    if (!isTestActive) {\n      setIsTestActive(true);\n      setResetTestWords(false);\n    }\n\n    let lastTypedChar = e.target.value[e.target.value.length-1];\n    if(e.target.value.length > userInput.length) {\n      if(lastTypedChar === ' '){\n        onSpacebar();\n      } else {\n        onUserInput(lastTypedChar);\n      }\n    }\n    setUserInput(e.target.value)\n  }\n\n  const handleClick = () => {\n    typingArea.current.focus();\n  }\n\n  return (\n    <div onClick={handleClick} className='app'>\n      <input\n        className='input'\n        ref={typingArea}\n        onKeyDown={handleOnKeyDown}\n        onChange={handleOnChange}\n        type='text'\n        disabled={isTestDone}\n        autoFocus\n      />\n      <div className='app-container'>\n        <Title />\n        <WordList\n          currentWordNum={currentWordNum}\n          currentCharNum={currentCharNum}\n          testWords={testWords}\n          resetTestWords={resetTestState}\n          userInputWords={userInputWords}\n          isTestActive={isTestActive}\n        />\n        <div className='row'>\n          <div className='column'>\n            <TimerCircle\n              isTestActive={isTestActive}\n              isTestDone={isTestDone}\n              testComplete={testComplete}\n              resetTest={resetTest}\n            />\n          </div>\n          <div className='column'>\n            <Stats\n              testWords={testWords}\n              userInputWords={userInputWords}\n              currentWordNum={currentWordNum}\n              currentCharNum={currentCharNum}\n              isTestActive={isTestActive}\n              isTestDone={isTestDone}\n              resetTestState={resetTestState}\n            />\n          </div>\n        </div>\n        <Footer/>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}