{"version":3,"sources":["Components/Title.js","Components/Stats.js","utils/constants.js","Components/TimerCircle.js","Components/Char.js","Components/Word.js","Components/WordList.js","Components/Footer.js","App.js","index.js"],"names":["Title","className","icon","faKeyboard","Stats","testWords","userInputWords","currentWordNum","currentCharNum","isTestActive","resetTestState","useState","wordPerMin","setWordPerMin","seconds","setSeconds","totalTypedChars","setTotalTypedChars","totalCorrectChars","setTotalCorrectChars","useEffect","interval","setInterval","clearInterval","calcWPM","prevUserInputWordsRef","useRef","current","calcAccuracy","prevUserInputWords","wpm","Math","round","Number","isNaN","undefined","length","slice","RenderTime","remainingTime","resetTest","resetCircle","onMouseDown","e","preventDefault","TimerCircle","testComplete","isTestDone","key","setKey","isPlaying","duration","colors","onComplete","Char","style","char","memo","word","isCurrentWord","charList","split","map","i","chars","setChars","scrollRef","createRef","prevCurrentWordNumRef","prevCurrentWordNum","scrollIntoView","behavior","block","newChars","charInstance","inputChar","newChar","concat","updateCharStyles","ref","x","prevProps","nextProps","index","WordList","resetTestWords","isCurrent","renderWord","Footer","href","faGithub","App","setCurrentWordNum","setCurrentCharNum","setUserInputWords","randomWords","exactly","setTestWords","setIsTestActive","setIsTestDone","setResetTestWords","typingArea","onClick","focus","onKeyPress","userInputs","onUserInput","onKeyDown","onDeletion","type","disabled","autoFocus","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2289e021.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/title.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faKeyboard } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Title = () => {\n    return (\n        <div className=\"title\">\n            <FontAwesomeIcon icon={faKeyboard}/> Typing{\" \"}\n            <span className=\"page-title-bold\">Test</span>\n        </div>\n    );\n};\n\nexport default Title;","import React, { useState, useEffect, useRef } from 'react';\nimport { SIXTY_SECONDS } from '../utils/constants'\nimport '../css/stats.css';\n\nconst Stats = ({ testWords, userInputWords, currentWordNum, currentCharNum, isTestActive, resetTestState }) => {\n    const [wordPerMin, setWordPerMin] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    const [totalTypedChars, setTotalTypedChars] = useState(0);\n    const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isTestActive) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 0.1);\n            }, 100);\n        }\n        return () => clearInterval(interval);\n    }, [seconds, isTestActive]);\n\n    useEffect(() => {\n        if (resetTestState) {\n            setWordPerMin(0);\n            setSeconds(0);\n            setTotalTypedChars(0);\n            setTotalCorrectChars(0);\n        }\n        calcWPM();\n    }, [userInputWords, seconds, resetTestState])\n\n    const prevUserInputWordsRef = useRef();\n    useEffect(() => {\n        prevUserInputWordsRef.current = userInputWords[currentWordNum];\n        calcAccuracy();\n    }, [userInputWords])\n    const prevUserInputWords = prevUserInputWordsRef.current;\n\n    const calcWPM = () => {\n        const wpm = Math.round((currentWordNum / seconds) * SIXTY_SECONDS);\n        setWordPerMin((Number.isNaN(wpm)) ? 0 : wpm)\n    }\n\n    const isCharCorrect = () => {\n        if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n            setTotalCorrectChars(totalCorrectChars + 1)\n            setTotalTypedChars(totalTypedChars + 1)\n        } else {\n            setTotalTypedChars(totalTypedChars + 1)\n        }\n    }\n\n    const calcAccuracy = () => {\n        if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n            isCharCorrect();\n        }\n    }\n\n    return (\n        <div>\n            <div className='statHolder'>\n                <div className='statBoxes'>\n                    <div className='stat-heading'>Words Per Minute</div>\n                    {wordPerMin}\n                </div>\n            </div>\n            <div className='statHolder'>\n                <div className='statBoxes'>\n                    <div className='stat-heading'>Accuracy</div>\n                    {totalTypedChars === 0 ? 0 : Math.round((totalCorrectChars / totalTypedChars) * 100)}%\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\n\nexport default Stats;","export const SIXTY_SECONDS = 60;\nexport const TEST_WORDS = 250;","import React, { useState } from 'react';\nimport { SIXTY_SECONDS } from '../utils/constants'\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport '../css/timercircle.css';\n\nconst RenderTime = ({ remainingTime, resetTest, resetCircle }) => {\n  if (remainingTime === 0) {\n    return <button className='reset-button'\n      onMouseDown={(e) => {\n        e.preventDefault();\n        resetTest();\n        resetCircle();\n      }}> Click Here to Start Over! </button>\n  }\n  return (\n    <div className=\"timer\">\n      <div className=\"value\">{remainingTime}</div>\n      <div className=\"text\">seconds</div>\n    </div>\n  );\n};\n\nconst TimerCircle = ({ isTestActive, testComplete, resetTest, isTestDone }) => {\n  const [key, setKey] = useState(0);\n  const resetCircle = () => {\n    setKey(key => key + 1);\n  }\n\n  return (\n    <div className=\"timer-wrapper\">\n      <CountdownCircleTimer\n        key={key}\n        isPlaying={isTestActive}\n        duration={SIXTY_SECONDS}\n        colors={[\n          ['#4CC053', 0.415],\n          ['#FFD300', 0.415],\n          ['#FF554c', 0.17],\n        ]}\n        onComplete={() => testComplete()}\n      >\n        {<RenderTime\n          resetTest={resetTest}\n          resetCircle={resetCircle}\n        />}\n      </CountdownCircleTimer>\n    </div>\n  );\n}\n\nexport default TimerCircle;\n","import React from 'react';\nimport '../css/char.css';\n\nconst Char = ({ style, char }) => {\n    return (\n        <span className={style}>{char}</span>\n    )\n}\nexport default Char;","import React, { useState, useEffect, createRef, useRef, memo } from 'react';\nimport Char from './Char';\nimport '../css/word.css';\n\nconst Word = ({ word, isCurrentWord, userInputWords, currentWordNum, resetTestState, isTestActive }) => {\n  const charList = word.split('').map((char, i) => {\n    return {\n      char: char,\n      style: 'default',\n      key: i\n    };\n  });\n  const [chars, setChars] = useState(charList);\n  const scrollRef = createRef();\n\n  const prevUserInputWordsRef = useRef();\n  const prevCurrentWordNumRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords[currentWordNum];\n    prevCurrentWordNumRef.current = currentWordNum;\n  }, [userInputWords, currentWordNum])\n\n  const prevUserInputWords = prevUserInputWordsRef.current;\n  const prevCurrentWordNum = prevCurrentWordNumRef.current;\n\n  const updateCharStyles = () => {\n    if (userInputWords[currentWordNum].length <= word.length && isTestActive) {\n      const newChars = chars.map((charInstance, i) => {\n        const inputChar = userInputWords[currentWordNum][i];\n        const newChar = {\n          ...charInstance,\n          style: 'default'\n        };\n        if (charInstance.char === inputChar) {\n          newChar.style = 'correctChar'\n        } else if (inputChar && inputChar !== charInstance.char) {\n          newChar.style = 'incorrectChar'\n        }\n        return newChar;\n      })\n      setChars(newChars);\n    } if (userInputWords[currentWordNum].length >= word.length &&\n      (prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n      setChars(chars => chars.slice(0, -1))\n    } else if (userInputWords[currentWordNum].length > word.length) {\n      setChars(chars => chars.concat({\n        char: userInputWords[currentWordNum].slice(-1),\n        style: 'incorrectChar',\n        key: chars.length\n      }))\n    }\n  }\n\n  useEffect(() => {\n    if (resetTestState) {\n      setChars(charList);\n    }\n    if (isCurrentWord) {\n      scrollRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n      });\n    }\n    if (isCurrentWord && prevCurrentWordNum === currentWordNum) {\n      updateCharStyles();\n    }\n  }, [userInputWords, currentWordNum, resetTestState])\n\n  const renderChar = (key, char, style) => {\n    return (\n      <Char\n        key={key}\n        style={style}\n        char={char}\n      />\n    );\n  };\n  return (\n    <li ref={scrollRef} className={(isCurrentWord) ? 'current-word' : 'default'}>\n      {chars.map(x => renderChar(x.key, x.char, x.style))}\n    </li>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (nextProps.resetTestState) {\n    return false;\n  }\n  else if (nextProps.currentWordNum + 1 === nextProps.index) {\n    return false;\n  }\n  else if (nextProps.currentWordNum === nextProps.index) {\n    return false;\n  }\n  else if (nextProps.currentWordNum - 1 === nextProps.index) {\n    return false\n  } else {\n    return true;\n  }\n}\n\nexport default memo(Word, areEqual);\n","import React, { useEffect } from 'react';\nimport Word from './Word';\nimport '../css/wordlist.css';\n\nconst WordList = ({ userInputWords, currentWordNum, testWords, resetTestWords: resetTestState, isTestActive }) => {\n    const renderWord = (key, word, isCurrent) => {\n        return (\n            <Word\n                key={key}\n                index={key}\n                word={word}\n                isCurrentWord={isCurrent}\n                currentWordNum={currentWordNum}\n                resetTestState={resetTestState}\n                userInputWords={userInputWords}\n                isTestActive={isTestActive}\n            />\n        )\n    }\n\n    return (\n        <div className='wordlist-wrapper'>\n            { testWords.map((word, index) =>\n                renderWord(index, word, (index === currentWordNum) ? true : false))}\n        </div>\n    );\n}\n\nexport default WordList;","import React from \"react\";\nimport \"../css/footer.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Footer = () => {\n  return (\n    <div className=\"page-footer\">\n      <a href=\"https://github.com/blove239/thetypingtest\">\n        <FontAwesomeIcon icon={faGithub} />\n      </a>{\" \"}\n      / Made by{\" \"}\n      <a href=\"http://brandonlove.ca\">Brandon Love.</a>\n    </div>\n  );\n};\n\nexport default Footer;","import React, { useState, useRef } from 'react';\nimport Title from './Components/Title';\nimport Stats from './Components/Stats';\nimport TimerCircle from './Components/TimerCircle';\nimport WordList from './Components/WordList';\nimport randomWords from 'random-words';\nimport Footer from './Components/Footer';\nimport { TEST_WORDS } from './utils/constants'\n\nimport './App.css';\n\nconst App = () => {\n  const [currentWordNum, setCurrentWordNum] = useState(0);\n  const [currentCharNum, setCurrentCharNum] = useState(0);\n  const [userInputWords, setUserInputWords] = useState(['']);\n  const [testWords, setTestWords] = useState(randomWords({ exactly: TEST_WORDS }));\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestDone, setIsTestDone] = useState(false);\n  const [resetTestState, setResetTestWords] = useState(false);\n  const typingArea = useRef(null);\n\n  const testComplete = () => {\n    setIsTestActive(false);\n    setIsTestDone(true);\n  }\n\n  const resetTest = () => {\n    setCurrentWordNum(0);\n    setCurrentCharNum(0);\n    setUserInputWords(['']);\n    setTestWords(randomWords({ exactly: TEST_WORDS }));\n    setIsTestActive(false);\n    setIsTestDone(false);\n    setResetTestWords(true);\n  }\n\n  const onDeletion = (e) => {\n    if (userInputWords.length > 1 && userInputWords[currentWordNum].length === 0) {\n      setUserInputWords(userInputWords.slice(0, -1));\n      setCurrentWordNum(currentWordNum - 1);\n      setCurrentCharNum(userInputWords.slice(0, -1).length);\n    }\n    else if (userInputWords[currentWordNum].length > 0) {\n      setCurrentCharNum(currentCharNum - 1);\n      let userInputs = [...userInputWords];\n      userInputs[currentWordNum] = userInputs[currentWordNum].slice(0, -1);\n      setUserInputWords(userInputs);\n    }\n  }\n\n  const onSpacebar = (e) => {\n    if (testWords[currentWordNum].length <= userInputWords[currentWordNum].length) {\n      setUserInputWords([...userInputWords, '']);\n      setCurrentWordNum(currentWordNum + 1);\n      setCurrentCharNum(0);\n    }\n  }\n\n  const onUserInput = (e) => {\n    setCurrentCharNum(currentCharNum + 1);\n    let userInputs = [...userInputWords];\n    userInputs[currentWordNum] = userInputs[currentWordNum].concat(e.key);\n    setUserInputWords(userInputs);\n  }\n\n  const handleOnKeyPress = (e) => {\n    if (!isTestActive) {\n      setIsTestActive(true);\n      setResetTestWords(false);\n    }\n    if (e.key === ' ') {\n      onSpacebar(e);\n    } else {\n      onUserInput(e);\n    }\n  }\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === \"Backspace\") {\n      onDeletion(e);\n    }\n  }\n\n  const handleClick = () => {\n    typingArea.current.focus();\n  }\n\n  return (\n    <div onClick={handleClick} className='app'>\n      <input\n        className='input'\n        ref={typingArea}\n        onKeyPress={handleOnKeyPress}\n        onKeyDown={handleOnKeyDown}\n        type='text'\n        disabled={isTestDone}\n        autoFocus\n      />\n      <div className='app-container'>\n        <Title />\n        <WordList\n          currentWordNum={currentWordNum}\n          currentCharNum={currentCharNum}\n          testWords={testWords}\n          resetTestWords={resetTestState}\n          userInputWords={userInputWords}\n          isTestActive={isTestActive}\n        />\n        <div className='row'>\n          <div className='column'>\n            <TimerCircle\n              isTestActive={isTestActive}\n              isTestDone={isTestDone}\n              testComplete={testComplete}\n              resetTest={resetTest}\n            />\n          </div>\n          <div className='column'>\n            <Stats\n              testWords={testWords}\n              userInputWords={userInputWords}\n              currentWordNum={currentWordNum}\n              currentCharNum={currentCharNum}\n              isTestActive={isTestActive}\n              resetTestState={resetTestState}\n            />\n          </div>\n        </div>\n        <Footer />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}