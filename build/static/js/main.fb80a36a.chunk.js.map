{"version":3,"sources":["Components/Title.js","Components/Stats.js","utils/constants.js","Components/TimerCircle.js","Components/Char.js","Components/Word.js","Components/WordList.js","Components/Footer.js","App.js","index.js"],"names":["Title","className","icon","faKeyboard","Stats","testWords","userInputWords","currentWordNum","currentCharNum","isTestActive","resetTestState","useState","wordPerMin","setWordPerMin","seconds","setSeconds","totalTypedChars","setTotalTypedChars","totalCorrectChars","setTotalCorrectChars","useEffect","interval","setInterval","clearInterval","calcWPM","prevUserInputWordsRef","useRef","current","calcAccuracy","prevUserInputWords","wpm","Math","round","Number","isNaN","undefined","length","slice","RenderTime","remainingTime","resetTest","resetCircle","onMouseDown","e","preventDefault","TimerCircle","testComplete","isTestDone","key","setKey","window","matchMedia","matches","timerSize","setTimerSize","handleResize","addEventListener","isPlaying","duration","colors","size","onComplete","Char","style","char","memo","word","isCurrentWord","charList","split","map","i","chars","setChars","scrollRef","createRef","prevCurrentWordNumRef","prevCurrentWordNum","scrollIntoView","behavior","block","newChars","charInstance","inputChar","newChar","concat","updateCharStyles","ref","x","prevProps","nextProps","index","WordList","resetTestWords","isCurrent","renderWord","Footer","href","faGithub","App","setCurrentWordNum","setCurrentCharNum","setUserInputWords","randomWords","exactly","setTestWords","setIsTestActive","setIsTestDone","setResetTestWords","typingArea","onClick","focus","onKeyDown","keyCode","userInputs","onDeletion","onUserInput","type","disabled","autoFocus","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb80a36a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/title.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faKeyboard } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Title = () => {\n    return (\n        <div className=\"title\">\n            <FontAwesomeIcon icon={faKeyboard}/> Typing{\" \"}\n            <span className=\"page-title-bold\">Test</span>\n        </div>\n    );\n};\n\nexport default Title;","import React, { useState, useEffect, useRef } from 'react';\nimport { SIXTY_SECONDS } from '../utils/constants'\nimport '../css/stats.css';\n\nconst Stats = ({ testWords, userInputWords, currentWordNum, currentCharNum, isTestActive, resetTestState }) => {\n    const [ wordPerMin, setWordPerMin] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    const [totalTypedChars, setTotalTypedChars] = useState(0);\n    const [totalCorrectChars, setTotalCorrectChars] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (isTestActive) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 0.05);\n            }, 50);\n        }\n        return () => clearInterval(interval);\n    }, [seconds, isTestActive]);\n\n    useEffect(() => {\n        if (resetTestState) {\n            setWordPerMin(0);\n            setSeconds(0);\n            setTotalTypedChars(0);\n            setTotalCorrectChars(0);\n        }\n        calcWPM();\n    }, [userInputWords, seconds, resetTestState])\n\n    const prevUserInputWordsRef = useRef();\n    useEffect(() => {\n        prevUserInputWordsRef.current = userInputWords[currentWordNum];\n        calcAccuracy();\n    }, [userInputWords])\n    const prevUserInputWords = prevUserInputWordsRef.current;\n\n    const calcWPM = () => {\n        const wpm = Math.round((currentWordNum / seconds) * SIXTY_SECONDS);\n        setWordPerMin((Number.isNaN(wpm)) ? 0 : wpm)\n    }\n\n    const isCharCorrect = () => {\n        if (userInputWords[currentWordNum].slice(-1) === testWords[currentWordNum][currentCharNum - 1]) {\n            setTotalCorrectChars(totalCorrectChars + 1)\n            setTotalTypedChars(totalTypedChars + 1)\n        } else {\n            setTotalTypedChars(totalTypedChars + 1)\n        }\n    }\n\n    const calcAccuracy = () => {\n        if (prevUserInputWords !== undefined && !(prevUserInputWords.length > userInputWords[currentWordNum].length)) {\n            isCharCorrect();\n        }\n    }\n\n    return (\n        <div>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Words Per Min.</div>\n                    {wordPerMin}\n                </div>\n            </div>\n            <div className='stat-container'>\n                <div className='stat-boxes'>\n                    <div className='stat-heading'>Accuracy</div>\n                    {totalTypedChars === 0 ? 0 : Math.round((totalCorrectChars / totalTypedChars) * 100)}\n                    <span className='percent-sign'>%</span>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\n\nexport default Stats;","export const SIXTY_SECONDS = 60;\nexport const TEST_WORDS = 250;\nexport const SMALL_SIZE = 90;\nexport const LARGE_SIZE = 150;\nexport const KEYCODE_BACKSPACE = 8;\nexport const KEYCODE_SPACEBAR = 32;\nexport const KEYCODE_A = 65;\nexport const KEYCODE_Z = 90;","import React, { useEffect, useState } from 'react';\nimport { SIXTY_SECONDS, SMALL_SIZE, LARGE_SIZE } from '../utils/constants'\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport '../css/timercircle.css';\n\nconst RenderTime = ({ remainingTime, resetTest, resetCircle }) => {\n  if (remainingTime === 0) {\n    return <button className='reset-button'\n      onMouseDown={(e) => {\n        e.preventDefault();\n        resetTest();\n        resetCircle();\n      }}> Click Here to Start Over! </button>\n  }\n  return (\n    <div className=\"timer\">\n      <div className=\"value\">{remainingTime}</div>\n      <div className=\"text\">seconds</div>\n    </div>\n  );\n};\n\nconst TimerCircle = ({ isTestActive, testComplete, resetTest, isTestDone }) => {\n  const [key, setKey] = useState(0);\n  const resetCircle = () => {\n    setKey(key => key + 1);\n  }\n\n  const [timerSize, setTimerSize] = useState(window.matchMedia(\"(max-width: 768px)\").matches\n    ? SMALL_SIZE : LARGE_SIZE);\n\n  useEffect(() => {\n    function handleResize() {\n      if (window.matchMedia(\"(max-width: 768px)\").matches) {\n        setTimerSize(SMALL_SIZE);\n      } else {\n        setTimerSize(LARGE_SIZE);\n      }\n    }\n    handleResize()\n    window.addEventListener('resize', handleResize)\n  })\n\n  return (\n    <div className=\"timer-wrapper\">\n      <CountdownCircleTimer\n        key={key}\n        isPlaying={isTestActive}\n        duration={SIXTY_SECONDS}\n        colors={[\n          ['#4CC053', 0.415],\n          ['#FFD300', 0.415],\n          ['#FF554c', 0.17],\n        ]}\n        size={timerSize}\n        onComplete={() => testComplete()}\n      >\n        {<RenderTime\n          resetTest={resetTest}\n          resetCircle={resetCircle}\n        />}\n      </CountdownCircleTimer>\n    </div>\n  );\n}\n\nexport default TimerCircle;\n","import React from 'react';\nimport '../css/char.css';\n\nconst Char = ({ style, char }) => {\n    return (\n        <span className={style}>{char}</span>\n    )\n}\nexport default Char;","import React, { useState, useEffect, createRef, useRef, memo } from 'react';\nimport Char from './Char';\nimport '../css/word.css';\n\nconst Word = ({ word, isCurrentWord, userInputWords, currentWordNum, resetTestState, isTestActive }) => {\n  const charList = word.split('').map((char, i) => {\n    return {\n      char: char,\n      style: 'default',\n      key: i\n    };\n  });\n  const [chars, setChars] = useState(charList);\n  const scrollRef = createRef();\n\n  const prevUserInputWordsRef = useRef();\n  const prevCurrentWordNumRef = useRef();\n  useEffect(() => {\n    prevUserInputWordsRef.current = userInputWords;\n    prevCurrentWordNumRef.current = currentWordNum;\n  }, [userInputWords, currentWordNum])\n\n  const prevUserInputWords = prevUserInputWordsRef.current;\n  const prevCurrentWordNum = prevCurrentWordNumRef.current;\n\n  const updateCharStyles = () => {\n    if (userInputWords.length <= word.length && isTestActive) {\n      const newChars = chars.map((charInstance, i) => {\n        const inputChar = userInputWords[i];\n        const newChar = {\n          ...charInstance,\n          style: 'default'\n        };\n        if (charInstance.char === inputChar) {\n          newChar.style = 'correct-char'\n        } else if (inputChar && inputChar !== charInstance.char) {\n          newChar.style = 'incorrect-char'\n        }\n        return newChar;\n      })\n      setChars(newChars);\n    }\n    if (userInputWords.length >= word.length &&\n      (prevUserInputWords.length > userInputWords.length)) {\n      setChars(chars => chars.slice(0, -1))\n    }\n    else if (userInputWords.length > word.length) {\n      setChars(chars => chars.concat({\n        char: userInputWords.slice(-1),\n        style: 'incorrect-char',\n        key: chars.length\n      }))\n    }\n  }\n\n  useEffect(() => {\n    if (resetTestState) {\n      setChars(charList);\n    }\n    if (isCurrentWord) {\n      scrollRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n      });\n    }\n    if (isCurrentWord && prevCurrentWordNum === currentWordNum) {\n      updateCharStyles();\n    }\n  }, [userInputWords, currentWordNum, resetTestState])\n\n  const renderChar = (key, char, style) => {\n    return (\n      <Char\n        key={key}\n        style={style}\n        char={char}\n      />\n    );\n  };\n  return (\n    <li ref={scrollRef} className={(isCurrentWord) ? 'current-word' : 'default'}>\n      {chars.map(x => renderChar(x.key, x.char, x.style))}\n    </li>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (nextProps.resetTestState) {\n    return false;\n  }\n  else if (nextProps.currentWordNum + 1 === nextProps.index) {\n    return false;\n  }\n  else if (nextProps.currentWordNum === nextProps.index) {\n    return false;\n  }\n  else if (nextProps.currentWordNum - 1 === nextProps.index) {\n    return false\n  } else {\n    return true;\n  }\n}\n\nexport default memo(Word, areEqual);","import React from 'react';\nimport Word from './Word';\nimport '../css/wordlist.css';\n\nconst WordList = ({ userInputWords, currentWordNum, testWords, resetTestWords: resetTestState, isTestActive }) => {\n    const renderWord = (key, word, isCurrent) => {\n        return (\n            <Word\n                key={key}\n                index={key}\n                word={word}\n                isCurrentWord={isCurrent}\n                currentWordNum={currentWordNum}\n                resetTestState={resetTestState}\n                userInputWords={userInputWords[currentWordNum]}\n                isTestActive={isTestActive}\n            />\n        )\n    }\n\n    return (\n        <div className='wordlist-wrapper'>\n            { testWords.map((word, index) =>\n                renderWord(index, word, (index === currentWordNum) ? true : false))}\n        </div>\n    );\n}\n\nexport default WordList;","import React from \"react\";\nimport \"../css/footer.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Footer = () => {\n  return (\n    <div className=\"page-footer\">\n      <a href=\"https://github.com/blove239/thetypingtest\">\n        <FontAwesomeIcon icon={faGithub} />\n      </a>{\" \"}\n      / Made by{\" \"}\n      <a href=\"http://brandonlove.ca\">Brandon Love.</a>\n    </div>\n  );\n};\n\nexport default Footer;","import React, { useState, useRef } from 'react';\nimport Title from './Components/Title';\nimport Stats from './Components/Stats';\nimport TimerCircle from './Components/TimerCircle';\nimport WordList from './Components/WordList';\nimport Footer from './Components/Footer';\nimport { TEST_WORDS, KEYCODE_BACKSPACE, KEYCODE_SPACEBAR, KEYCODE_A, KEYCODE_Z } from './utils/constants'\nimport randomWords from 'random-words';\nimport './App.css';\n\nconst App = () => {\n  const [currentWordNum, setCurrentWordNum] = useState(0);\n  const [currentCharNum, setCurrentCharNum] = useState(0);\n  const [userInputWords, setUserInputWords] = useState(['']);\n  const [testWords, setTestWords] = useState(randomWords({ exactly: TEST_WORDS }));\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestDone, setIsTestDone] = useState(false);\n  const [resetTestState, setResetTestWords] = useState(false);\n  const typingArea = useRef(null);\n\n  const testComplete = () => {\n    setIsTestActive(false);\n    setIsTestDone(true);\n  }\n\n  const resetTest = () => {\n    setCurrentWordNum(0);\n    setCurrentCharNum(0);\n    setUserInputWords(['']);\n    setTestWords(randomWords({ exactly: TEST_WORDS }));\n    setIsTestActive(false);\n    setIsTestDone(false);\n    setResetTestWords(true);\n  }\n\n  const onDeletion = (e) => {\n    if (userInputWords.length > 1 && userInputWords[currentWordNum].length === 0) {\n      setUserInputWords(userInputWords.slice(0, -1));\n      setCurrentWordNum(currentWordNum - 1);\n      setCurrentCharNum(userInputWords.slice(0, -1).length);\n    }\n    else if (userInputWords[currentWordNum].length > 0) {\n      setCurrentCharNum(currentCharNum - 1);\n      let userInputs = [...userInputWords];\n      userInputs[currentWordNum] = userInputs[currentWordNum].slice(0, -1);\n      setUserInputWords(userInputs);\n    }\n  }\n\n  const onSpacebar = () => {\n    if (testWords[currentWordNum].length <= userInputWords[currentWordNum].length) {\n      setUserInputWords([...userInputWords, '']);\n      setCurrentWordNum(currentWordNum + 1);\n      setCurrentCharNum(0);\n    }\n  }\n\n  const onUserInput = (e) => {\n    setCurrentCharNum(currentCharNum + 1);\n    let userInputs = [...userInputWords];\n    userInputs[currentWordNum] = userInputs[currentWordNum].concat(e.key);\n    setUserInputWords(userInputs);\n  }\n\n  const handleOnKeyDown = (e) => {\n    if (!isTestActive) {\n      setIsTestActive(true);\n      setResetTestWords(false);\n    }\n    if (e.keyCode === KEYCODE_BACKSPACE) {\n      onDeletion(e);\n    }\n    if (e.keyCode === KEYCODE_SPACEBAR) {\n      onSpacebar();\n    }\n    if (e.keyCode >= KEYCODE_A && e.keyCode <= KEYCODE_Z) {\n      onUserInput(e);\n    }\n  }\n\n  const handleClick = () => {\n    typingArea.current.focus();\n  }\n\n  return (\n    <div onClick={handleClick} className='app'>\n      <input\n        className='input'\n        ref={typingArea}\n        onKeyDown={handleOnKeyDown}\n        type='text'\n        disabled={isTestDone}\n        autoFocus\n      />\n      <div className='app-container'>\n        <Title />\n        <WordList\n          currentWordNum={currentWordNum}\n          currentCharNum={currentCharNum}\n          testWords={testWords}\n          resetTestWords={resetTestState}\n          userInputWords={userInputWords}\n          isTestActive={isTestActive}\n        />\n        <div className='row'>\n          <div className='column'>\n            <TimerCircle\n              isTestActive={isTestActive}\n              isTestDone={isTestDone}\n              testComplete={testComplete}\n              resetTest={resetTest}\n            />\n          </div>\n          <div className='column'>\n            <Stats\n              testWords={testWords}\n              userInputWords={userInputWords}\n              currentWordNum={currentWordNum}\n              currentCharNum={currentCharNum}\n              isTestActive={isTestActive}\n              resetTestState={resetTestState}\n            />\n          </div>\n        </div>\n        <Footer/>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}